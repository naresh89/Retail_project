package oracle.retail.apps.aipdt.cnpd.model.applicationmodule;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.adf.share.security.SecurityContext;

import oracle.jbo.Row;

import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;

import oracle.jbo.server.DBTransaction;

import oracle.retail.apps.aipdt.cnpd.model.applicationmodule.common.CorporateNonPlanningDaysAM;
import oracle.retail.apps.aipdt.cnpd.model.view.CorporateNPDaysSearchVOImpl;
import oracle.retail.apps.aipdt.cnpd.model.view.CorporateNPDaysSearchVORowImpl;
import oracle.retail.apps.aipdt.cnpd.model.view.DtGttNonPlanningDaysVOImpl;
import oracle.retail.apps.aipdt.cnpd.model.view.DtGttNonPlanningDaysVORowImpl;
import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.DtListDetail;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtDepTypeSearchRec;
import oracle.retail.apps.aipdt.common.jdbc.type.DtDepTypeSearchTbl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtNpDaysSearchRec;
import oracle.retail.apps.aipdt.common.jdbc.type.DtNpDaysSearchTbl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.dt.model.appModule.DeploymentTypeAMImpl;
import oracle.retail.apps.aipdt.dt.model.view.DeploymentTypeResultVORowImpl;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
import oracle.retail.apps.framework.jdbc.util.SQLParam;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 16 17:54:07 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CorporateNonPlanningDaysAMImpl extends AipdtApplicationModuleImpl implements CorporateNonPlanningDaysAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CorporateNonPlanningDaysAMImpl() {

    }
    ADFLogger logger = ADFLogger.createADFLogger(CorporateNonPlanningDaysAMImpl.class);
    private final static String PLSQL_NPD_SEARCH_FUNCTION = "DT_NON_PLANNING_DAYS_SQL. SEARCH_NON_PLANIING_DAYS";
    private final static String PLSQL_NPD_SAVE_FUNCTION = "DT_NON_PLANNING_DAYS_SQL. SAVE_NON_PLANIING_DAYS";
    private static String passivate_Id = null;

    /**
     * Container's getter for CorporateNPDaysSearchVO1.
     * @return CorporateNPDaysSearchVO1
     */
    public CorporateNPDaysSearchVOImpl getCorporateNPDaysSearchVO() {
        return (CorporateNPDaysSearchVOImpl) findViewObject("CorporateNPDaysSearchVO");
    }

    /**
     *
     */
    public void initActivity() {
        CorporateNPDaysSearchVOImpl searchVOImpl = getCorporateNPDaysSearchVO();
        if (searchVOImpl != null) {
            Row newRow = searchVOImpl.createRow();
            searchVOImpl.insertRow(newRow);
            searchVOImpl.setCurrentRow(newRow);
        }
        filterDayTypeDropdown(Constants.DEFAULT_LOOKUP_TYPE);
    }

    public void handleReset() {

        DtGttNonPlanningDaysVOImpl resultVOImpl = getDtGttNonPlanningDaysVO();
        if (getTransaction().isDirty()) {
            this.getDBTransaction().rollback();
            this.getDBTransaction().clearEntityCache("oracle.retail.apps.aipdt.cnpd.model.entity.DtGttNonPlanningDaysEO");
            resultVOImpl.clearCache();
        }

        ViewObject searchVO = getCorporateNPDaysSearchVO();
        if (searchVO != null && searchVO.getCurrentRow() != null) {
            searchVO.removeCurrentRow();
        }

        initActivity();

        if (resultVOImpl != null) {
            String whereClause = "1 = 2";
            resultVOImpl.setWhereClause(whereClause);
            resultVOImpl.executeQuery();
        }
    }

    private void refreshRows() {
        ViewObject resultVO = getDtGttNonPlanningDaysVO();
        RowSetIterator rowSetIter = resultVO.createRowSetIterator(null);
        while (rowSetIter.hasNext()) {
            rowSetIter.next().refresh(Row.REFRESH_UNDO_CHANGES | Row.REFRESH_WITH_DB_FORGET_CHANGES);
        }
    }


    /**
     *
     * @param lookupType
     */

    public void filterDayTypeDropdown(String lookupType) {
        CorporateNPDaysSearchVOImpl searchVO = getCorporateNPDaysSearchVO();
        Row currentRow = searchVO.getCurrentRow();
        if (currentRow != null) {
            ViewObject codeVO = ((CorporateNPDaysSearchVORowImpl) currentRow).getDtLookupCodesVO1().getViewObject();
            if (codeVO != null) {
                codeVO.applyViewCriteria(null);
                codeVO.setWhereClause(null);
                /*ViewCriteria vc =
                    codeVO.getViewCriteriaManager().getViewCriteria(Constants.DT_LOOKUP_CODES_VIEW_CRITERIA);
                vc.ensureVariableManager().setVariableValue(Constants.DT_LOOKUP_CODES_VIEW_CRITERIA_BIND_VARIABLE,
                                                            lookupType);
                vc.setCriteriaMode(ViewCriteria.CRITERIA_MODE_QUERY);
                //codeVO.setNamedWhereClauseParam(Constants.DT_LOOKUP_CODES_VIEW_CRITERIA_BIND_VARIABLE,lookupType);
                codeVO.applyViewCriteria(vc);  */
                codeVO.setWhereClause(Constants.DT_LOOKUP_CODES_TYPE_VARIABLE + " = '" + lookupType + "'");
                codeVO.executeQuery();
                System.out.println("row Count " + codeVO.getEstimatedRowCount());
            }
        }
    }

    public String getIdsFromDtListDetailTable(Integer itemList, String TYPE) {
        String itemVal = null;
        if (TYPE != null && TYPE.equals("WAREHOUSE_LIST")) {
            itemVal = AipdtModelUtil.fetchIdsFromDtListDetailTable(itemList, DtListDetail.WAREHOUSE_ID.toString());
        } else if (TYPE != null && TYPE.equals("STORE_LIST")) {
            itemVal = AipdtModelUtil.fetchIdsFromDtListDetailTable(itemList, DtListDetail.STORE_ID.toString());
        }
        return itemVal;
    }


    /**
     * This method  will be invoked on click of Search from DeploymentType Bean and returns rowCount after executing PLSQL package for the given input.
     * @param inputMap
     * @return
     */
    @SuppressWarnings("unchecked")

    public Map handleSearch(Map inputMap) {
        Integer plSqlCallStatus = 0;
        String errorMessage = null;
        logger.info("Entering handleSearch()");
        logger.info("input Map size : " + inputMap.size());
        Map outMap = new HashMap();
        //passivate_Id = passivateStateForUndo();
        try {
            DtNpDaysSearchRec[] recObjArray = new DtNpDaysSearchRec[1];
            DtNpDaysSearchRec recObj = new DtNpDaysSearchRec();
            String locId = null;
            String locType = null;
            if (inputMap != null && inputMap.size() > 0) {
                if (inputMap.get(Constants.LOCATION_TYPE) != null) {
                    locType = String.valueOf(inputMap.get(Constants.LOCATION_TYPE));
                }
                recObj.setLocType(locType);
                if (inputMap.get(Constants.LOCATION_ID) != null) {
                    locId = String.valueOf(inputMap.get(Constants.LOCATION_ID));
                }
                recObj.setLocationId(locId);
                if (inputMap.get(Constants.DAY_TYPE) != null) {
                    recObj.setDayType(String.valueOf(inputMap.get(Constants.DAY_TYPE)));
                }
                if (inputMap.get(Constants.IS_EXCEPTION) != null) {
                    recObj.setIsException(String.valueOf(inputMap.get(Constants.IS_EXCEPTION)));
                }

                recObj.setCreateUser(AipdtModelUtil.getUserName());
                recObjArray[0] = recObj;


                DtNpDaysSearchTbl tableObj = new DtNpDaysSearchTbl();
                tableObj.setArray(recObjArray);

                SQLParam outErrorParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);
                DBTransaction dbTransacion = this.getDBTransaction();

                SQLParam tblArrParam =
                    new SQLParam(tableObj, ParamType.IN, Types.ARRAY, DtNpDaysSearchTbl._SQL_NAME,
                                 DtNpDaysSearchTbl.getORADataFactory());


                plSqlCallStatus =
                    (Integer) AppsDBUtils.callStoredFunction(dbTransacion, PLSQL_NPD_SEARCH_FUNCTION, Types.INTEGER,
                                                             tblArrParam, outErrorParam);


                logger.info("plSqlCallStatus -->" + plSqlCallStatus);
                logger.info("outErrorParam -->" + outErrorParam.getValue());
                System.out.println("plSqlCallStatus -->" + plSqlCallStatus);
                System.out.println("outErrorParam -->" + outErrorParam.getValue());
                if (outErrorParam.getValue() == null && plSqlCallStatus == 0) {
                    ViewObject voImpl = this.getDtGttNonPlanningDaysVO();
                    voImpl.setWhereClause(null);
                    voImpl.setQueryMode(ViewObject.QUERY_MODE_SCAN_DATABASE_TABLES);
                    voImpl.executeQuery();
                } else {
                    // If Procedure returns 1 and assigning error message to Method parameter.
                    errorMessage = String.valueOf(outErrorParam.getValue());
                } //     ((DeploymentTypeResultVORowImpl)getDeploymentTypeResultVO().getCurrentRow()).getAttribute("StartDate").
                outMap.put(Constants.SEARCH_ERROR_CODE, null);
                outMap.put(Constants.SEARCH_ERROR_MESSAGE, errorMessage);
                outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return outMap;
    }

    /**
     * Container's getter for DtGttNonPlanningDaysVO1.
     * @return DtGttNonPlanningDaysVO1
     */
    public DtGttNonPlanningDaysVOImpl getDtGttNonPlanningDaysVO() {
        return (DtGttNonPlanningDaysVOImpl) findViewObject("DtGttNonPlanningDaysVO");
    }

    /**
     * This method will create Row on to ResultVO.
     */
    public void addRowOnResultVO() {
        try {
            ViewObject resultVO = getDtGttNonPlanningDaysVO();
            DtGttNonPlanningDaysVORowImpl firstRow = (DtGttNonPlanningDaysVORowImpl) resultVO.first();
            String dayType = firstRow.getDayType();
            Row newRow = resultVO.createRow();
            String userName = null;
            SecurityContext securityContext = ADFContext.getCurrent().getSecurityContext();
            if(securityContext != null){
               userName = securityContext.getUserName();
            }
            DtGttNonPlanningDaysVORowImpl rowImpl = (DtGttNonPlanningDaysVORowImpl) newRow;
            BigDecimal seqId = new BigDecimal(resultVO.getEstimatedRowCount() + 1);
            rowImpl.setId(seqId);
            rowImpl.setIsException("N");
            rowImpl.setStatus("N");
            rowImpl.setDayType(dayType);
            rowImpl.setTransactionId(firstRow.getTransactionId());
            rowImpl.setCreateUser(userName);
            Date currentDate = new Date();
            rowImpl.setCreateDate(new java.sql.Date(currentDate.getTime()));
            resultVO.insertRowAtRangeIndex((int) resultVO.getEstimatedRowCount(), newRow);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deleteRowsFromResultVO() {
        RowSetIterator rowIter = null;
        try {
            ViewObject resultVO = getDtGttNonPlanningDaysVO();
            rowIter = resultVO.createRowSetIterator(null);
            Row[] rowSet = rowIter.getFilteredRows("UpdateInd", "1");
            for (int i = 0; i < rowSet.length; i++) {
                DtGttNonPlanningDaysVORowImpl row = (DtGttNonPlanningDaysVORowImpl) rowSet[i];
                row.setStatus("D");
            }

            resultVO.setWhereClause("STATUS != 'D'");
            resultVO.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
            resultVO.executeQuery();
            System.out.println("RowCount --> " + resultVO.getEstimatedRowCount());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (rowIter != null) {
                rowIter.closeRowSetIterator();
            }
        }
    }

    /**
     * This method pushes changes to DB and invoked SAVE function to update DT Tables.
     * @return
     */
    @SuppressWarnings("unchecked")

    public Map handleSave() {
        Map outMap = new HashMap();
        String errorMessage = null;
        Integer plSqlCallStatus = 1;
        try {
            DBTransaction dbTransacion = this.getDBTransaction();
            dbTransacion.postChanges();
            DtGttNonPlanningDaysVORowImpl rowImpl =
                (DtGttNonPlanningDaysVORowImpl) this.getDtGttNonPlanningDaysVO().first();
            if (rowImpl != null) {
                BigDecimal transactionId = rowImpl.getTransactionId();
                SQLParam transactionIdParam = new SQLParam(transactionId, ParamType.IN, Types.NUMERIC);
                SQLParam outErrorParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);

                SQLParam timeStamp = new SQLParam(null, ParamType.OUT, Types.NUMERIC);

                plSqlCallStatus =
                    (Integer) AppsDBUtils.callStoredFunction(dbTransacion, PLSQL_NPD_SAVE_FUNCTION, Types.INTEGER,
                                                             transactionIdParam, timeStamp, outErrorParam);
                if (outErrorParam != null && outErrorParam.getValue() == null && plSqlCallStatus == 0) {
                    dbTransacion.commit();
                } else {
                    errorMessage = (String) outErrorParam.getValue();
                }
            } else {
                errorMessage = "An error has occured. Please contact your System Administrator.";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        outMap.put(Constants.SEARCH_ERROR_CODE, null);
        outMap.put(Constants.SEARCH_ERROR_MESSAGE, errorMessage);
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus);
        return outMap;

    }

    public void setAll(Date date) {
        try {
            ViewObject resultVO = getDtGttNonPlanningDaysVO();
            RowSetIterator rowIter = resultVO.createRowSetIterator(null);
            rowIter = resultVO.createRowSetIterator(null);
            Row[] rowSet = rowIter.getFilteredRows("Status", "N");
            for (int count = 0; count < rowSet.length; count++) {
                Row currentRow = rowSet[count];
                if (currentRow != null) {
                    DtGttNonPlanningDaysVORowImpl row = (DtGttNonPlanningDaysVORowImpl) currentRow;
                    row.setDay(new java.sql.Date(date.getTime()));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Boolean isTransactionDirty() {
        return this.getDBTransaction().isDirty();
    }


}

