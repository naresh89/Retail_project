package oracle.retail.apps.aipdt.rc.model.applicationmodule;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.SequenceImpl;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewObjectImpl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.common.model.util.DateUtil;
import oracle.retail.apps.aipdt.common.model.util.StoreProcErrorCode;
import oracle.retail.apps.aipdt.common.model.util.StringUtil;
import oracle.retail.apps.aipdt.common.model.view.DateParamVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreFormatVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StockingPointVOImpl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtStgObj;
import oracle.retail.apps.aipdt.common.jdbc.type.DtStgTbl;
import oracle.retail.apps.aipdt.rc.model.applicationmodule.common.ReceivingCalendarAM;
import oracle.retail.apps.aipdt.rc.model.view.ReceivingCalendarResultsVORowImpl;
import oracle.retail.apps.aipdt.rc.model.view.ReceivingCalendarSearchVORowImpl;
import oracle.retail.apps.aipdt.root.model.applicationmodule.AipdtRootAMImpl;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
import oracle.retail.apps.framework.jdbc.util.SQLParam;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 24 22:01:44 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReceivingCalendarAMImpl extends AipdtApplicationModuleImpl implements ReceivingCalendarAM {

    ADFLogger logger =
        ADFLogger.createADFLogger(ReceivingCalendarAMImpl.class);

    private final static String PLSQL_POPULATE_DT_RECEIVING_CAL_STG =
        "DT_POPULATE_STG.POPULATE_DT_RECEIVING_CAL_STG";

    private final static String PLSQL_LOAD_RECEV_CAL =
        "DT_DATA_EXECUTION.LOAD_RECEV_CAL";

    /**
     * This is the default constructor (do not remove).
     */
    public ReceivingCalendarAMImpl() {
    }

    /**
     * Initializes the receiving calendar task flow
     */
    public void initReceivingCalendar() {
        //Initialize search form
        AipdtViewObjectImpl rcVO = getReceivingCalendarSearchVO1();
        rcVO.executeEmptyRowSet();
        Row row = rcVO.createRow();
        rcVO.insertRow(row);
        rcVO.setCurrentRow(row);

        //Initialize results form
        AipdtViewObjectImpl dtRCVO = getReceivingCalendarResultsVO1();
        dtRCVO.setWhereClause(null);
        dtRCVO.setWhereClause("1=2");
        dtRCVO.executeQuery();
        dtRCVO.executeEmptyRowSet();
    }


    /**
     * Container's getter for ProductTypeVO1.
     * @return ProductTypeVO1
     */
    public AipdtViewObjectImpl getProductTypeVO1() {
        return (AipdtViewObjectImpl)findViewObject("ProductTypeVO1");
    }


    /**
     * Container's getter for LocationTypeVO1.
     * @return LocationTypeVO1
     */
    public AipdtViewObjectImpl getLocationTypeVO1() {
        return (AipdtViewObjectImpl)findViewObject("LocationTypeVO1");
    }


    /**
     * Checks whether default exists or not when user tries to create an exception
     * @return
     */
    private boolean isDefaultExistForException(RCInputDataBean rcInputDataBean) {
        logger.info("Inside isDefaultExistForException method");
        AipdtViewObjectImpl dtRCVO = getDtReceivingCalendarVO1();
        dtRCVO.applyViewCriteria(null);
        dtRCVO.setWhereClause(null);
        ViewCriteria dtRCVC = dtRCVO.createViewCriteria();

        ViewCriteriaRow isExceptionRow = dtRCVC.createViewCriteriaRow();
        isExceptionRow.setAttribute("IsException", Constants.NO);
        isExceptionRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(isExceptionRow);

        ViewCriteriaRow productTypeIdRow = dtRCVC.createViewCriteriaRow();
        productTypeIdRow.setAttribute("ProductTypeId",
                                      rcInputDataBean.getProductTypeId());
        productTypeIdRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(productTypeIdRow);

        ViewCriteriaRow destinationTypeRow = dtRCVC.createViewCriteriaRow();
        destinationTypeRow.setAttribute("DestinationType",
                                        rcInputDataBean.getDestinationType());
        destinationTypeRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(destinationTypeRow);

        String destinationIds = null;
        if (rcInputDataBean.getSelectionType() == null) {
            destinationIds =
                    StringUtil.getStringFromSet(rcInputDataBean.getDestinationIdSet(),
                                                Constants.COMMA);
        }

        if (!StringUtil.isNullOrEmpty(destinationIds)) {
            String inClause = "IN (" + destinationIds + ")";
            ViewCriteriaRow destinationIdRow = dtRCVC.createViewCriteriaRow();
            destinationIdRow.setAttribute("DestinationId", inClause);
            destinationIdRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
            dtRCVC.addElement(destinationIdRow);
        }

        dtRCVO.applyViewCriteria(dtRCVC, true);
        dtRCVO.executeQuery();
        return dtRCVO.getEstimatedRowCount() > 0 ? true : false;
    }

    /**
     * Stages records with the helper method and queries the results with input search criteria
     * @return
     */
    public boolean handleSelect() {
        logger.info("Inside handleSelect method");
        //Preparing input data bean
        RCInputDataBean rcInputDataBean = prepareRCInputDateBean();
        //Stage records
        logger.info("Staging records...");
        stageRecords(rcInputDataBean);
        logger.info("Checking whether default exists or not if it's an exception to be created.");
        if (Constants.YES.equals(rcInputDataBean.getIsException()) &&
            (!isDefaultExistForException(rcInputDataBean))) {
            logger.warning("Exception cannot be created without having default created.");
            return false;
        }
        String destinationIds = null;
        if (rcInputDataBean.getSelectionType() == null) {
            destinationIds = StringUtil.getStringFromSet(rcInputDataBean.getDestinationIdSet(), Constants.COMMA);
        }

        //Search - Begin
        AipdtViewObjectImpl dtRCVO = getReceivingCalendarResultsVO1();
        dtRCVO.applyViewCriteria(null);
        dtRCVO.setWhereClause(null);
        logger.info("Fetching the results using : ");
        logger.info("Transaction Id ----> " +
                    rcInputDataBean.getTransactionId());
        logger.info("isException ----> " + rcInputDataBean.getIsException());
        logger.info("productTypeId ----> " +
                    rcInputDataBean.getProductTypeId());
        logger.info("destinationType ----> " +
                    rcInputDataBean.getDestinationType());
        logger.info("destinationIds ----> " + destinationIds);

        ViewCriteria dtRCVC = dtRCVO.createViewCriteria();

        ViewCriteriaRow transactionIdRow = dtRCVC.createViewCriteriaRow();
        transactionIdRow.setAttribute("TransactionId",
                                      rcInputDataBean.getTransactionId());
        transactionIdRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(transactionIdRow);

        ViewCriteriaRow isExceptionRow = dtRCVC.createViewCriteriaRow();
        isExceptionRow.setAttribute("IsException",
                                    rcInputDataBean.getIsException());
        isExceptionRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(isExceptionRow);

        ViewCriteriaRow productTypeIdRow = dtRCVC.createViewCriteriaRow();
        productTypeIdRow.setAttribute("ProductTypeId",
                                      rcInputDataBean.getProductTypeId());
        productTypeIdRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(productTypeIdRow);

        ViewCriteriaRow destinationTypeRow = dtRCVC.createViewCriteriaRow();
        destinationTypeRow.setAttribute("DestinationType",
                                        rcInputDataBean.getDestinationType());
        destinationTypeRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
        dtRCVC.addElement(destinationTypeRow);

        if (!StringUtil.isNullOrEmpty(destinationIds)) {
            String inClause = "IN (" + destinationIds + ")";
            ViewCriteriaRow destinationIdRow = dtRCVC.createViewCriteriaRow();
            destinationIdRow.setAttribute("DestinationId", inClause);
            destinationIdRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);
            dtRCVC.addElement(destinationIdRow);
        }

        dtRCVO.applyViewCriteria(dtRCVC, true);

        logger.fine("Receiving Calendar Results Query --> " +
                    dtRCVO.getQuery());
        dtRCVO.executeQuery();
        logger.info("Total Result records fetched : " +
                    dtRCVO.getEstimatedRowCount());
        //Search - End
        return true;
    }

    /**
     * Prepare a bean with input data received from receiving calendar search screen
     * @return
     */
    private RCInputDataBean prepareRCInputDateBean() {
        logger.info("Inside prepareRCInputDateBean method");
                
        //Read input data
        AipdtViewObjectImpl rcVO = getReceivingCalendarSearchVO1();
        ReceivingCalendarSearchVORowImpl currentRow =
            (ReceivingCalendarSearchVORowImpl)rcVO.getCurrentRow();
        Boolean exceptionAttr = currentRow.getExceptionAttr();
        if (exceptionAttr == null) {
            exceptionAttr = false;
        }
        String isException =  exceptionAttr ? Constants.YES : Constants.NO;
        logger.info("is Exception : " + isException);
        
        String destinationType = getDestinationType(currentRow.getLocationType());
        logger.info("Destination Type : " + destinationType);
        
        boolean allStoresSelected = false;
        boolean allWarehousesSelected = false;
        if (Constants.STORE_CODE.equals(destinationType)) {
            String storeSelected = currentRow.getStore();
            if (!StringUtil.isNullOrEmpty(storeSelected)) {
                AipdtViewObjectImpl aipdtVO = getStoreVO1();
                aipdtVO.applyViewCriteria(null);
                aipdtVO.setWhereClause(null);
                aipdtVO.executeQuery();
                long totalStores = aipdtVO.getEstimatedRowCount();
                Set<String> totalStoresSelected =
                    StringUtil.getSetFromString(storeSelected,
                                                Constants.SEMI_COLON);
                logger.info("Total number of unique stores selected : " +
                            totalStoresSelected.size());
                if (totalStores == totalStoresSelected.size()) {
                    allStoresSelected = true;
                }
            }
        } else {
            String warehouseSelected = currentRow.getStockingPoint();
            if (!StringUtil.isNullOrEmpty(warehouseSelected)) {
                AipdtViewObjectImpl aipdtVO = getStockingPointVO1();
                aipdtVO.applyViewCriteria(null);
                aipdtVO.setWhereClause(null);
                aipdtVO.executeQuery();
                long totalWarehouses = aipdtVO.getEstimatedRowCount();
                Set<String> totalWarehousesSelected =
                    StringUtil.getSetFromString(warehouseSelected,
                                                Constants.SEMI_COLON);
                logger.info("Total number of unique warehouses selected : " +
                            totalWarehousesSelected.size());
                if (totalWarehouses == totalWarehousesSelected.size()) {
                    allWarehousesSelected = true;
                }
            }
        }

        //Reading product type id
        String productTypeValue = currentRow.getProductType();
        Set<String> productTypeSet =
            getIdsOfGivenCodes(productTypeValue, "ProductTypeCode",
                               "ProductTypeId");
        if (productTypeSet.isEmpty()) {
            JboException jboEx =
                new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.RC_PRODUCT_TYPE_NOT_FOUND +
                                                                       " : " +
                                                                       productTypeValue));
            logger.severe(jboEx.getLocalizedMessage());
            throw jboEx;
        }
        BigDecimal productTypeId =
            new BigDecimal(productTypeSet.iterator().next());
        logger.info("Product Type ID : " + productTypeId);

        //Reading start date and end date
        java.sql.Timestamp startDate =
            getTimestamp(DateUtil.getVDatePlusOne());
        java.sql.Timestamp endDate = null;
        if (Constants.YES.equals(isException)) {
            //endDate = getTimestamp(DateUtil.getSystemDatePlusOne());
            endDate = startDate;
        } else {
            endDate = getTimestamp(DateUtil.getSystemHighDate());
        }
        logger.info("Start Date : " + startDate);
        logger.info("End Date : " + endDate);

        //Reading create date
        java.sql.Timestamp createDate = getTimestamp(DateUtil.getSystemDate());

        //Reading selection type
        String selectionType = (allStoresSelected || allWarehousesSelected) ? Constants.ALL_CODE : null;
        logger.info("Selection Type : " + selectionType);
        
        Set<String> destinationIdSet = null;
        if (selectionType == null) {
            String destination = null;
            if (Constants.WAREHOUSE_CODE.equals(destinationType)) {
                destination = currentRow.getStockingPoint();
                destinationIdSet =
                        getIdsOfGivenCodes(destination, "WarehouseCode",
                                           "WarehouseId");
            } else {
                destination = currentRow.getStoreFormat();
                if (!StringUtil.isNullOrEmpty(destination)) {
                    //destination = currentRow.getStoreFormat();
                    Set<String> sfIdSet =
                        getIdsOfGivenCodes(destination, "StoreFormatCode",
                                           "StoreFormatId");
                    if (!sfIdSet.isEmpty()) {
                        destinationIdSet =
                                getIdsOfGivenCodes(sfIdSet.iterator().next(),
                                                   "StoreFormatId", "StoreId");
                    }
                } else {
                    destination = currentRow.getStore();
                    destinationIdSet =
                            getIdsOfGivenCodes(destination, "StoreCode",
                                               "StoreId");
                }
            }
            if ((destinationIdSet == null) || destinationIdSet.isEmpty()) {
                JboException jboEx =
                    new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                           Constants.RC_DESTINATION_NOT_FOUND +
                                                                           " : " +
                                                                           destination));
                logger.severe(jboEx.getLocalizedMessage());
                throw jboEx;
            }
            logger.info("Destination ID Set : " + destinationIdSet);
        }
        
        //Generating Transaction Id
        AipdtRootAMImpl rootAM = (AipdtRootAMImpl)getRootApplicationModule();
        DBTransaction dbTransacion = rootAM.getDBTransaction();
        SequenceImpl seq =
            new SequenceImpl(Constants.DT_SEQ_RECEIVING_CAL_STG, dbTransacion);
        BigDecimal transactionId =
            seq.getSequenceNumber().getBigDecimalValue();
        logger.info("Transaction Id generated : " + transactionId);

        //Populating input data bean
        RCInputDataBean rcInputDataBean = new RCInputDataBean();
        rcInputDataBean.setTransactionId(transactionId);
        rcInputDataBean.setIsException(isException);
        rcInputDataBean.setProductTypeId(productTypeId);
        rcInputDataBean.setSelectionType(selectionType);
        rcInputDataBean.setDestinationType(destinationType);
        rcInputDataBean.setDestinationIdSet(destinationIdSet);
        rcInputDataBean.setStartDate(startDate);
        rcInputDataBean.setEndDate(endDate);
        rcInputDataBean.setCreateUser(AipdtModelUtil.getUserName());
        rcInputDataBean.setCreateDate(createDate);
        rcInputDataBean.setUpdateUser(AipdtModelUtil.getUserName());
        rcInputDataBean.setUpdateDate(createDate);
        rcInputDataBean.setReceivingPattern(Constants.DEFAULT_RECEIVING_PATTERN);
        return rcInputDataBean;
    }

    /**
     * Helper method to stage the records into GTT table
     */
    private void stageRecords(RCInputDataBean rcInputDataBean) {
        logger.info("****** In stageRecords method *******");
        try {
            List<DtStgObj> stgObjList = new ArrayList<DtStgObj>();
            if (Constants.ALL_CODE.equals(rcInputDataBean.getSelectionType())) {
                if (rcInputDataBean.getDestinationIdSet() != null) {
                    rcInputDataBean.getDestinationIdSet().clear();
                }
                DtStgObj stgObj = new DtStgObj();
                stgObj.setTransactionId(rcInputDataBean.getTransactionId());
                stgObj.setCommodityId(rcInputDataBean.getProductTypeId());
                stgObj.setSourceId(null);
                stgObj.setIsException(rcInputDataBean.getIsException());
                stgObj.setReceivingPattern(rcInputDataBean.getReceivingPattern());
                stgObj.setDestinationType(rcInputDataBean.getDestinationType());
                stgObj.setSourceSelType(rcInputDataBean.getSelectionType());
                stgObj.setStartDate(rcInputDataBean.getStartDate());
                stgObj.setEndDate(rcInputDataBean.getEndDate());
                stgObj.setCreateDate(rcInputDataBean.getCreateDate());
                stgObj.setCreateUser(rcInputDataBean.getCreateUser());
                stgObj.setUpdateDate(rcInputDataBean.getUpdateDate());
                stgObj.setUpdateUser(rcInputDataBean.getUpdateUser());

                stgObjList.add(stgObj);
            } else {
                Set<String> destinationIdSet = rcInputDataBean.getDestinationIdSet();
                if((destinationIdSet == null) || destinationIdSet.isEmpty()){
                  JboException jboEx =
                      new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE, Constants.RC_DESTINATION_NOT_FOUND));
                  logger.severe(jboEx.getLocalizedMessage());
                  throw jboEx; 
                }
                Iterator<String> destinationIdIt = destinationIdSet.iterator();

                DtStgObj stgObj = null;
                while (destinationIdIt.hasNext()) {
                    String destinationId = destinationIdIt.next();

                    stgObj = new DtStgObj();
                    stgObj.setTransactionId(rcInputDataBean.getTransactionId());
                    stgObj.setCommodityId(rcInputDataBean.getProductTypeId());
                    stgObj.setDestinationId(new BigDecimal(destinationId));
                    stgObj.setIsException(rcInputDataBean.getIsException());
                    stgObj.setReceivingPattern(rcInputDataBean.getReceivingPattern());
                    stgObj.setDestinationType(rcInputDataBean.getDestinationType());
                    stgObj.setSourceSelType(rcInputDataBean.getSelectionType());
                    stgObj.setStartDate(rcInputDataBean.getStartDate());
                    stgObj.setEndDate(rcInputDataBean.getEndDate());
                    stgObj.setCreateDate(rcInputDataBean.getCreateDate());
                    stgObj.setCreateUser(rcInputDataBean.getCreateUser());
                    stgObj.setUpdateDate(rcInputDataBean.getUpdateDate());
                    stgObj.setUpdateUser(rcInputDataBean.getUpdateUser());

                    stgObjList.add(stgObj);
                }
            } //else

            // get access to transaction
            AipdtRootAMImpl rootAM =
                (AipdtRootAMImpl)getRootApplicationModule();
            DBTransaction dbTransaction = rootAM.getDBTransaction();

            DtStgTbl stgTbl =
                new DtStgTbl(stgObjList.toArray(new DtStgObj[stgObjList.size()]));
            SQLParam tblArrParam =
                new SQLParam(stgTbl, ParamType.IN, Types.ARRAY, DtStgTbl._SQL_NAME, DtStgTbl.getORADataFactory());
            SQLParam modeParam =
                new SQLParam("INSERT", ParamType.IN, Types.VARCHAR);
            SQLParam errorCodeParam =
                new SQLParam(null, ParamType.OUT, Types.VARCHAR);
            Integer plSqlCallStatus = null;
            plSqlCallStatus =
                    (Integer)AppsDBUtils.callStoredFunction(dbTransaction,
                                                            PLSQL_POPULATE_DT_RECEIVING_CAL_STG,
                                                            Types.INTEGER,
                                                            tblArrParam,
                                                            modeParam,
                                                            errorCodeParam);
            if (plSqlCallStatus == 0) {
                logger.info("PLSQL Receiving Calendar function : " +
                            PLSQL_POPULATE_DT_RECEIVING_CAL_STG +
                            " returned True.");
                //dbTransacion.commit();
            } else {
                JboException jboEx =
                    new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                           Constants.RC_ERROR_INSERT_STAGE_DATA));
                logger.severe(jboEx.getLocalizedMessage());
                String o_errorCode =
                    (errorCodeParam != null) ? (String)errorCodeParam.getValue() :
                    null;
                logger.severe("Database Error returned by " +
                              PLSQL_POPULATE_DT_RECEIVING_CAL_STG + " --> " +
                              o_errorCode);
                throw jboEx;
            }

        } catch (JboException jboEx) {
            throw jboEx;
        } catch (Exception ex) {
            ex.printStackTrace();
            JboException jboEx =
                new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.RC_ERROR_INSERT_STAGE_DATA));
            logger.severe(jboEx.getLocalizedMessage());
            throw jboEx;
        }
    }

    /**
     * Helper method to retrieve Attribute IDs for the given codes
     * @param codes
     * @param codeAttrName
     * @param idAttrName
     * @return
     */
    private Set<String> getIdsOfGivenCodes(String codes, String codeAttrName,
                                           String idAttrName) {
        logger.info("Inside getIdsOfGivenCodes method");
        logger.info("Retrieving IDs for Attribute : " + codeAttrName +
                    ", with Codes : " + codes);
        Set<String> inputIdSet = new HashSet<String>();
        if (StringUtil.isNullOrEmpty(codes)) {
            return inputIdSet;
        }
        List<String> inputCodeList =
            StringUtil.getListFromStringWithQuotes(codes,
                                                   Constants.SEMI_COLON);
        codes =
                StringUtil.getStringFromList(inputCodeList, Constants.COMMA);
        AipdtViewObjectImpl aipdtVO = null;
        if ("StoreCode".equals(codeAttrName) ||
            "StoreFormatId".equals(codeAttrName)) {
            aipdtVO = getStoreVO1();
        } else if ("WarehouseCode".equals(codeAttrName)) {
            aipdtVO = getStockingPointVO1();
        } else if ("ProductTypeCode".equals(codeAttrName)) {
            aipdtVO = getProductTypeVO1();
        } else if ("StoreFormatCode".equals(codeAttrName)) {
            aipdtVO = getStoreFormatVO1();
        } else {
            logger.warning("Could not retrieve IDs. Invalid attribute : " +
                           codeAttrName + " passed, no matching VO found.");
        }

        if (aipdtVO != null) {
            logger.fine("Attribute IDs are getting retrieved using view object : " +
                        aipdtVO.getFullName());
            aipdtVO.applyViewCriteria(null);
            aipdtVO.setWhereClause(null);
            String inClause = "IN (" + codes + ")";
            ViewCriteria aipdtVC = aipdtVO.createViewCriteria();
            ViewCriteriaRow aipdtVCRow = aipdtVC.createViewCriteriaRow();
            aipdtVCRow.setAttribute(codeAttrName, inClause);
            aipdtVC.addElement(aipdtVCRow);
            aipdtVO.applyViewCriteria(aipdtVC, true);
            aipdtVO.executeQuery();
            if (aipdtVO.getEstimatedRowCount() > 0) {
                AttributeDefImpl attrDef =
                    (AttributeDefImpl)aipdtVO.findAttributeDef(idAttrName);
                String attrDatatype = attrDef.getJavaType().getName();
                logger.fine("Attribute Name : " + idAttrName +
                            ", Attibute Type : " + attrDatatype);
                RowSetIterator storeRowSetIt =
                    aipdtVO.createRowSetIterator(null);
                while (storeRowSetIt.hasNext()) {
                    Row row = storeRowSetIt.next();
                    if ("oracle.jbo.domain.Number".equals(attrDatatype)) {
                        inputIdSet.add(((Number)row.getAttribute(idAttrName)).toString());
                    } else if ("java.math.BigDecimal".equals(attrDatatype)) {
                        inputIdSet.add(((BigDecimal)row.getAttribute(idAttrName)).toString());
                    } else {
                        inputIdSet.add(row.getAttribute(idAttrName).toString());
                    }
                }
            }
        }
        logger.info("Selected Attribute ID Set : " + inputIdSet);
        return inputIdSet;
    }

    /**
     * Updates the staged receiving calendar records in the GTT table and invokes
     * the PLSQL function to merge the records into DT tables.
     */
    public void saveReceivingCalendar() {
        logger.info("Inside saveReceivingCalendar method");
        AipdtViewObjectImpl resultsVO = getReceivingCalendarResultsVO1();
        RowSetIterator resultsSet = resultsVO.createRowSetIterator(null);
        DtStgObj stgObj = null;
        try {
            List<DtStgObj> stgObjList = new ArrayList<DtStgObj>();
            java.sql.Timestamp updateDate =
                getTimestamp(DateUtil.getSystemDate());
            String updateUser = AipdtModelUtil.getUserName();
            while (resultsSet.hasNext()) {
                ReceivingCalendarResultsVORowImpl row =
                    (ReceivingCalendarResultsVORowImpl)resultsSet.next();
                stgObj = new DtStgObj();
                stgObj.setTransactionId(row.getTransactionId());
                stgObj.setCommodityId(row.getProductTypeId());
                stgObj.setDestinationId(row.getDestinationId());
                stgObj.setIsException(row.getIsException());
                stgObj.setReceivingPattern(row.getReceivingPattern());
                stgObj.setDestinationType(row.getDestinationType());
                stgObj.setSourceSelType(row.getSelectionType());
                stgObj.setStartDate(getTimestamp(row.getStartDate()));
                stgObj.setEndDate(getTimestamp(row.getEndDate()));
                stgObj.setCreateUser(row.getCreateUser());
                stgObj.setCreateDate(getTimestamp(row.getCreateDate()));
                stgObj.setUpdateUser(updateUser);
                stgObj.setUpdateDate(updateDate);

                stgObjList.add(stgObj);
            }
            resultsSet.closeRowSetIterator();
            if (stgObjList.isEmpty()) {
                logger.warning("No records to save.");
                return;
            }
            AipdtRootAMImpl rootAM =
                (AipdtRootAMImpl)getRootApplicationModule();
            DBTransaction dbTransacion = rootAM.getDBTransaction();

            DtStgTbl stgTbl =
                new DtStgTbl(stgObjList.toArray(new DtStgObj[stgObjList.size()]));
            SQLParam tblArrParam =
                new SQLParam(stgTbl, ParamType.IN, Types.ARRAY, DtStgTbl._SQL_NAME, DtStgTbl.getORADataFactory());
            SQLParam modeParam =
                new SQLParam("UPDATE", ParamType.IN, Types.VARCHAR);
            SQLParam outErrorParam =
                new SQLParam(null, ParamType.OUT, Types.VARCHAR);
            Integer plSqlCallStatus = null;
            plSqlCallStatus =
                    (Integer)AppsDBUtils.callStoredFunction(dbTransacion,
                                                            PLSQL_POPULATE_DT_RECEIVING_CAL_STG,
                                                            Types.INTEGER,
                                                            tblArrParam,
                                                            modeParam,
                                                            outErrorParam);
            if (plSqlCallStatus == 0) {
                logger.info("PLSQL Receiving Calendar function : " +
                            PLSQL_POPULATE_DT_RECEIVING_CAL_STG +
                            " returned True : Invoking the PLSQL function to load the data into DT table.");
                SQLParam transactionIdParam =
                    new SQLParam(stgObjList.get(0).getTransactionId(),
                                 ParamType.IN, Types.NUMERIC);
                SQLParam errorCodeParam =
                    new SQLParam(null, ParamType.OUT, Types.VARCHAR);
                SQLParam timeStampParam =
                    new SQLParam(null, ParamType.OUT, Types.NUMERIC);
                plSqlCallStatus =
                        (Integer)AppsDBUtils.callStoredFunction(dbTransacion,
                                                                PLSQL_LOAD_RECEV_CAL,
                                                                Types.INTEGER,
                                                                transactionIdParam,
                                                                timeStampParam,
                                                                errorCodeParam);
                String o_errorCode =
                    (errorCodeParam != null) ? (String)errorCodeParam.getValue() :
                    null;
                if (plSqlCallStatus == 0) {
                    logger.info("PLSQL Receiving Calendar function : " +
                                PLSQL_LOAD_RECEV_CAL +
                                " returned True : Committing the transaction.");
                    dbTransacion.commit();
                } else {
                    StoreProcErrorCode errorCode =
                        StoreProcErrorCode.toErrorCode(o_errorCode);
                    StringBuilder errorBuilder =
                        new StringBuilder("Database Error returned by ");
                    errorBuilder.append(PLSQL_LOAD_RECEV_CAL);
                    errorBuilder.append(" --> ");
                    if (errorCode != null) {
                        errorBuilder.append("[Code:Id:Description] = [");
                        errorBuilder.append(errorCode.getCode());
                        errorBuilder.append(":");
                        errorBuilder.append(errorCode.getId());
                        errorBuilder.append(":");
                        errorBuilder.append(errorCode.getDesc());
                        errorBuilder.append("]");
                    } else {
                        errorBuilder.append(o_errorCode);
                    }
                    logger.severe(errorBuilder.toString());
                    JboException jboEx =
                        new JboException(errorBuilder.toString());
                    throw jboEx;
                }
            } else {
                JboException jboEx =
                    new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                           Constants.RC_ERROR_UPDATE_STAGE_DATA));
                logger.severe(jboEx.getLocalizedMessage());
                String o_errorCode =
                    (outErrorParam != null) ? (String)outErrorParam.getValue() :
                    null;
                logger.severe("Database Error returned by " +
                              PLSQL_POPULATE_DT_RECEIVING_CAL_STG + " --> " +
                              o_errorCode);
                throw jboEx;
            }
        } catch (JboException jboEx) {
            throw jboEx;
        } catch (Exception ex) {
            ex.printStackTrace();
            JboException jboEx =
                new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.RC_ERROR_UPDATE_STAGE_DATA));
            logger.severe(jboEx.getLocalizedMessage());
            throw jboEx;
        }
    }


    /**
     * Helper method to return java.sql.Timestamp from jbo date
     * @param domainDate
     * @return
     */
    private java.sql.Timestamp getTimestamp(Object domainDate) {
        return new java.sql.Timestamp(((Date)domainDate).dateValue().getTime());
    }


    /**
     * Container's getter for ReceivingCalendarResultsVO1.
     * @return ReceivingCalendarResultsVO1
     */
    public AipdtViewObjectImpl getReceivingCalendarResultsVO1() {
        return (AipdtViewObjectImpl)findViewObject("ReceivingCalendarResultsVO1");
    }

    /**
     * Rollbacks the transaction and initializes the taskflow on click of Reset button.
     */
    public void handleReset() {
        logger.info("Inside handleReset method");
        AipdtRootAMImpl rootAM = (AipdtRootAMImpl)getRootApplicationModule();
        DBTransaction dbTransacion = rootAM.getDBTransaction();
        dbTransacion.rollback();
        initReceivingCalendar();
    }

    /**
     * Container's getter for ReceivingCalendarSearch1.
     * @return ReceivingCalendarSearch1
     */
    public AipdtViewObjectImpl getReceivingCalendarSearchVO1() {
        return (AipdtViewObjectImpl)findViewObject("ReceivingCalendarSearchVO1");
    }

    /**
     * Helper method to get the destination code
     * @param locationType
     * @return
     */
    private static String getDestinationType(String locationType) {
        if (Constants.LOC_TYPE_STORE.equals(locationType) ||
            Constants.LOC_TYPE_STORE_FORMAT.equals(locationType)) {
            return Constants.STORE_CODE;
        } else if (Constants.LOC_TYPE_WAREHOUSE.equals(locationType)) {
            return Constants.WAREHOUSE_CODE;
        } else {
            return null;
        }
    }

    /**
     * Container's getter for DtReceivingCalendarVO1.
     * @return DtReceivingCalendarVO1
     */
    public AipdtViewObjectImpl getDtReceivingCalendarVO1() {
        return (AipdtViewObjectImpl)findViewObject("DtReceivingCalendarVO1");
    }

    /**
     * Container's getter for StoreVO1.
     * @return StoreVO1
     */
    public StoreVOImpl getStoreVO1() {
        return (StoreVOImpl)findViewObject("StoreVO1");
    }

    /**
     * Container's getter for StoreFormatVO1.
     * @return StoreFormatVO1
     */
    public StoreFormatVOImpl getStoreFormatVO1() {
        return (StoreFormatVOImpl)findViewObject("StoreFormatVO1");
    }

    /**
     * Container's getter for WarehouseVO1.
     * @return WarehouseVO1
     */
    public StockingPointVOImpl getStockingPointVO1() {
        return (StockingPointVOImpl)findViewObject("StockingPointVO1");
    }

    /**
     * Container's getter for DateParamVO1.
     * @return DateParamVO1
     */
    public DateParamVOImpl getDateParamVO1() {
        return (DateParamVOImpl)findViewObject("DateParamVO1");
    }

    /**
     * Bean class to hold the input data received from Receiving Calendar Search screen
     */
    private class RCInputDataBean {
        private BigDecimal transactionId;
        private BigDecimal productTypeId;
        private String isException;
        private Set<String> destinationIdSet;
        private String destinationType;
        private String selectionType;
        private java.sql.Timestamp startDate;
        private java.sql.Timestamp endDate;
        private java.sql.Timestamp createDate;
        private String createUser;
        private java.sql.Timestamp updateDate;
        private String updateUser;
        private String receivingPattern;


        public void setTransactionId(BigDecimal transactionId) {
            this.transactionId = transactionId;
        }

        public BigDecimal getTransactionId() {
            return transactionId;
        }

        public void setProductTypeId(BigDecimal productTypeId) {
            this.productTypeId = productTypeId;
        }

        public BigDecimal getProductTypeId() {
            return productTypeId;
        }

        public void setIsException(String isException) {
            this.isException = isException;
        }

        public String getIsException() {
            return isException;
        }

        public void setDestinationIdSet(Set<String> destinationIdSet) {
            this.destinationIdSet = destinationIdSet;
        }

        public Set<String> getDestinationIdSet() {
            return destinationIdSet;
        }

        public void setDestinationType(String destinationType) {
            this.destinationType = destinationType;
        }

        public String getDestinationType() {
            return destinationType;
        }

        public void setSelectionType(String selectionType) {
            this.selectionType = selectionType;
        }

        public String getSelectionType() {
            return selectionType;
        }

        public void setStartDate(java.sql.Timestamp startDate) {
            this.startDate = startDate;
        }

        public java.sql.Timestamp getStartDate() {
            return startDate;
        }

        public void setEndDate(java.sql.Timestamp endDate) {
            this.endDate = endDate;
        }

        public java.sql.Timestamp getEndDate() {
            return endDate;
        }

        public void setCreateDate(java.sql.Timestamp createDate) {
            this.createDate = createDate;
        }

        public java.sql.Timestamp getCreateDate() {
            return createDate;
        }

        public void setCreateUser(String createUser) {
            this.createUser = createUser;
        }

        public String getCreateUser() {
            return createUser;
        }

        public void setUpdateDate(java.sql.Timestamp updateDate) {
            this.updateDate = updateDate;
        }

        public java.sql.Timestamp getUpdateDate() {
            return updateDate;
        }

        public void setUpdateUser(String updateUser) {
            this.updateUser = updateUser;
        }

        public String getUpdateUser() {
            return updateUser;
        }

        public void setReceivingPattern(String receivingPattern) {
            this.receivingPattern = receivingPattern;
        }

        public String getReceivingPattern() {
            return receivingPattern;
        }
    }
}
