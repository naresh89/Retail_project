package oracle.retail.apps.aipdt.listcreate.model.view;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.adfbc.AipdtEntityImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 10 19:34:24 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DtGttListVORowImpl extends AipdtViewRowImpl {

    public static final int ENTITY_DTGTTLISTEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Code {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getCode();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setCode((String) value);
            }
        }
        ,
        Id {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getId();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setId((Number) value);
            }
        }
        ,
        Name {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getName();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setName((String) value);
            }
        }
        ,
        Privacy {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getPrivacy();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setPrivacy((String) value);
            }
        }
        ,
        SubType {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getSubType();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setSubType((String) value);
            }
        }
        ,
        Type {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getType();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setType((String) value);
            }
        }
        ,
        SubTypeDesc {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getSubTypeDesc();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setSubTypeDesc((String) value);
            }
        }
        ,
        PrivacyDesc {
            public Object get(DtGttListVORowImpl obj) {
                return obj.getPrivacyDesc();
            }

            public void put(DtGttListVORowImpl obj, Object value) {
                obj.setPrivacyDesc((String) value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(DtGttListVORowImpl object);

        public abstract void put(DtGttListVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CODE = AttributesEnum.Code.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int PRIVACY = AttributesEnum.Privacy.index();
    public static final int SUBTYPE = AttributesEnum.SubType.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int SUBTYPEDESC = AttributesEnum.SubTypeDesc.index();
    public static final int PRIVACYDESC = AttributesEnum.PrivacyDesc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DtGttListVORowImpl() {
    }

    /**
     * Gets DtGttListEO entity object.
     * @return the DtGttListEO
     */
    public AipdtEntityImpl getDtGttListEO() {
        return (AipdtEntityImpl) getEntity(ENTITY_DTGTTLISTEO);
    }

    /**
     * Gets the attribute value for CODE using the alias name Code.
     * @return the CODE
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as attribute value for CODE using the alias name Code.
     * @param value value to set the CODE
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public Number getId() {
        return (Number) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for PRIVACY using the alias name Privacy.
     * @return the PRIVACY
     */
    public String getPrivacy() {
        return (String) getAttributeInternal(PRIVACY);
    }

    /**
     * Sets <code>value</code> as attribute value for PRIVACY using the alias name Privacy.
     * @param value value to set the PRIVACY
     */
    public void setPrivacy(String value) {
        setAttributeInternal(PRIVACY, value);
    }

    /**
     * Gets the attribute value for SUB_TYPE using the alias name SubType.
     * @return the SUB_TYPE
     */
    public String getSubType() {
        return (String) getAttributeInternal(SUBTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for SUB_TYPE using the alias name SubType.
     * @param value value to set the SUB_TYPE
     */
    public void setSubType(String value) {
        setAttributeInternal(SUBTYPE, value);
    }

    /**
     * Gets the attribute value for TYPE using the alias name Type.
     * @return the TYPE
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TYPE using the alias name Type.
     * @param value value to set the TYPE
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for SUB_TYPE_DESC using the alias name SubTypeDesc.
     * @return the SUB_TYPE_DESC
     */
    public String getSubTypeDesc() {
        if(getSubType() != null && (getSubType().equalsIgnoreCase(Constants.VPN_SUB_TYPE) || 
                                    getSubType().equalsIgnoreCase(Constants.VPN_COLOUR_SUB_TYPE)||
                                    getSubType().equalsIgnoreCase(Constants.SKU_SUB_TYPE))){
            setSubTypeDesc(Constants.LOC_TYPE_ITEM);
        }else if (getSubType() != null && getSubType().equalsIgnoreCase(Constants.WORKING_INFO_SUPPLIER)) {
            setSubTypeDesc(Constants.LOC_TYPE_SUPPLIER);
        }else if (getSubType() != null && getSubType().equalsIgnoreCase(Constants.WORKING_INFO_STORE)) {
            setSubTypeDesc(Constants.LOC_TYPE_STORE);
        }else if (getSubType() != null && getSubType().equalsIgnoreCase(Constants.WORKING_INFO_WAREHOUSE)) {
            setSubTypeDesc(Constants.LOC_TYPE_WAREHOUSE);
        }
        return (String) getAttributeInternal(SUBTYPEDESC);
    }

    /**
     * Sets <code>value</code> as attribute value for SUB_TYPE_DESC using the alias name SubTypeDesc.
     * @param value value to set the SUB_TYPE_DESC
     */
    public void setSubTypeDesc(String value) {
        setAttributeInternal(SUBTYPEDESC, value);
    }

    /**
     * Gets the attribute value for PRIVACY_DESC using the alias name PrivacyDesc.
     * @return the PRIVACY_DESC
     */
    public String getPrivacyDesc() {
        if(getPrivacy() != null && getPrivacy().equalsIgnoreCase(Constants.LIST_PRIVACY_PRIVATE)){
            setPrivacyDesc(Constants.PRIVATE_DESC);
        }else if(getPrivacy() != null && getPrivacy().equalsIgnoreCase(Constants.LIST_PRIVACY_PUBLIC)){
            setPrivacyDesc(Constants.PUBLIC_DESC);
        }
        
        return (String) getAttributeInternal(PRIVACYDESC);
    }

    /**
     * Sets <code>value</code> as attribute value for PRIVACY_DESC using the alias name PrivacyDesc.
     * @param value value to set the PRIVACY_DESC
     */
    public void setPrivacyDesc(String value) {
        setAttributeInternal(PRIVACYDESC, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

