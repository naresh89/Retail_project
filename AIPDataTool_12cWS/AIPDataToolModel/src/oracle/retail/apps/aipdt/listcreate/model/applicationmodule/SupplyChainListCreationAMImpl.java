package oracle.retail.apps.aipdt.listcreate.model.applicationmodule;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.SequenceImpl;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewObjectImpl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.common.model.util.StringUtil;
import oracle.retail.apps.aipdt.common.model.view.StoreRegionVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreVOImpl;
import oracle.retail.apps.aipdt.listcreate.model.applicationmodule.common.SupplyChainListCreationAM;
import oracle.retail.apps.aipdt.listcreate.model.view.DtGttListVOImpl;
import oracle.retail.apps.aipdt.listcreate.model.view.DtGttListVORowImpl;
import oracle.retail.apps.aipdt.listcreate.model.view.DtListDetailsVOImpl;
import oracle.retail.apps.aipdt.listcreate.model.view.DtListHeadersVOImpl;
import oracle.retail.apps.aipdt.listcreate.model.view.ItemLevelFilterROVOImpl;
import oracle.retail.apps.aipdt.listcreate.model.view.SupplyListCreationProgVOImpl;
import oracle.retail.apps.aipdt.listcreate.model.view.SupplyListCreationProgVORowImpl;
import oracle.retail.apps.aipdt.root.model.applicationmodule.AipdtRootAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 08 11:27:01 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SupplyChainListCreationAMImpl extends AipdtApplicationModuleImpl implements SupplyChainListCreationAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SupplyChainListCreationAMImpl() {
    }

    private static ADFLogger logger = ADFLogger.createADFLogger(SupplyChainListCreationAMImpl.class);

    /**
     * Container's getter for SupplyListCreationProgVO1.
     * @return SupplyListCreationProgVO1
     */
    public SupplyListCreationProgVOImpl getSupplyListCreationProgVO1() {
        return (SupplyListCreationProgVOImpl) findViewObject("SupplyListCreationProgVO1");
    }

    /**
     * Container's getter for DtListDetailsVO.
     * @return DtListDetailsVO
     */
    public DtListDetailsVOImpl getDtListDetailsVO() {
        return (DtListDetailsVOImpl) findViewObject("DtListDetailsVO");
    }

    /**
     * Container's getter for DtListHeadersVO.
     * @return DtListHeadersVO
     */
    public DtListHeadersVOImpl getDtListHeadersVO() {
        return (DtListHeadersVOImpl) findViewObject("DtListHeadersVO");
    }

    /**
     * Container's getter for DtGttListVO1.
     * @return DtGttListVO1
     */
    public DtGttListVOImpl getDtGttListVO() {
        return (DtGttListVOImpl) findViewObject("DtGttListVO");
    }

    /**
     * Container's getter for StoreVO1.
     * @return StoreVO1
     */
    public StoreVOImpl getStoreVO() {
        return (StoreVOImpl) findViewObject("StoreVO");
    }

    /**
     * Container's getter for StoreRegionVO1.
     * @return StoreRegionVO1
     */
    public StoreRegionVOImpl getStoreRegionVO() {
        return (StoreRegionVOImpl) findViewObject("StoreRegionVO");
    }

    /**
     * Container's getter for DtListHdrROVO1.
     * @return DtListHdrROVO1
     */
    public AipdtViewObjectImpl getDtListHdrROVO() {
        return (AipdtViewObjectImpl) findViewObject("DtListHdrROVO");
    }

    /**
     * Container's getter for ItemLevelFilterROVO1.
     * @return ItemLevelFilterROVO1
     */
    public ItemLevelFilterROVOImpl getItemLevelFilterROVO() {
        return (ItemLevelFilterROVOImpl) findViewObject("ItemLevelFilterROVO");
    }

    /**
     * Invoked on the screen render
     * @param username
     */

    public void initCreateListActivity(String userName) {
        try {
            ViewObject supplyChainListVo = null;
            Row supplyChainListRow = null;
            userName = AipdtModelUtil.getLoggedInUserName();

            supplyChainListVo = this.getSupplyListCreationProgVO1();
            if (supplyChainListVo != null) {
                supplyChainListRow = supplyChainListVo.createRow();
                if (supplyChainListRow != null) {
                    supplyChainListRow.setAttribute(Constants.ROW_VAL_ATTR, Math.random());
                }
                supplyChainListVo.insertRow(supplyChainListRow);
            }
 
            DtGttListVOImpl createListVO = getDtGttListVO();
            createListVO.setWhereClause(null);
            createListVO.setWhereClause(Constants.RESET_WHERE_VALUE);
            createListVO.executeQuery();
            createListVO.executeEmptyRowSet();
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in initCreateListActivity" + e);
        }
    }

    /**
     * Invoked on the reset button click
     * @param null
     */

    public void onClickResetAction() {
        try {
            String userName = null;
            DtGttListVOImpl createListVO = getDtGttListVO();
            createListVO.setWhereClause(null);
            createListVO.setWhereClause(Constants.RESET_WHERE_VALUE);
            createListVO.executeQuery();
            createListVO.executeEmptyRowSet();
            this.getDBTransaction().rollback();
            getDBTransaction().clearEntityCache(null);
            ViewObject supplyChainListVo = this.getSupplyListCreationProgVO1();

            if (supplyChainListVo != null) {
                supplyChainListVo.executeEmptyRowSet();
            }
            userName = AipdtModelUtil.getLoggedInUserName();
            initCreateListActivity(userName);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in onClickResetAction" + e);
        }
    }

    /**
     * Invoked on the search button click
     * @param levelType
     * @param selected code
     */

    public String createSearchListResult(String levelType, String selctedCode) {
        String returnValue = null;
        try {
            ApplicationModuleImpl rootAM = getRootApplicationModule();

            DtGttListVOImpl createListVO = getDtGttListVO();
            createListVO.setWhereClause(null);
            createListVO.setWhereClause(Constants.RESET_WHERE_VALUE);
            createListVO.setQueryMode(ViewObject.QUERY_MODE_SCAN_ENTITY_ROWS);
            createListVO.setProperty(ViewObject.PROP_ALWAYS_USE_SORT, Boolean.TRUE);
            createListVO.executeQuery();
            createListVO.executeEmptyRowSet();

            SupplyListCreationProgVOImpl supplyListCreationVo = getSupplyListCreationProgVO1();
            SupplyListCreationProgVORowImpl createSupplyRow =
                (SupplyListCreationProgVORowImpl) supplyListCreationVo.getCurrentRow();

            //populate store
            List<String> codeValuesList = StringUtil.getListFromString(selctedCode, Constants.SEMI_COLON);

            String codetemp = null;

            if (selctedCode.contains(Constants.SEMI_COLON)) {
                codetemp = Constants.SINGLE_QUOTE + selctedCode.replace(Constants.SEMI_COLON, Constants.QUOTE_COMMA);
            } else {
                codetemp = Constants.SINGLE_QUOTE + selctedCode;
            }

            LinkedHashMap<String, String> validIdCodeValuesMap = new LinkedHashMap<String, String>();

            if (levelType != null && levelType.equalsIgnoreCase(Constants.WORKING_INFO_STORE)) {
                validIdCodeValuesMap = fetchIdsFromDtListDetailTable(levelType, codetemp);
                for (String storeCode : codeValuesList) {
                    DtGttListVORowImpl listRow = (DtGttListVORowImpl) createListVO.createRow();
                    listRow.setName(createSupplyRow.getListNameAttr());
                    listRow.setType(createSupplyRow.getWorkingLevelAttr());
                    listRow.setSubType(Constants.STORE_SUB_TYPE);
                    /* Commented by Arun - Need to be added in future*/
                   // listRow.setPrivacy(createSupplyRow.getListPrivacyAttr());
                    listRow.setPrivacy(Constants.LIST_PRIVACY_PUBLIC);
                    listRow.setCode(storeCode);
                    listRow.setId(StringUtil.getJboNumberFromString(validIdCodeValuesMap.get(storeCode)));
                    createListVO.insertRow(listRow);
                }
            } else if (levelType != null && levelType.equalsIgnoreCase(Constants.WORKING_INFO_WAREHOUSE)) {
                validIdCodeValuesMap = fetchIdsFromDtListDetailTable(levelType, codetemp);
                for (String warehouseCode : codeValuesList) {
                    DtGttListVORowImpl listRow = (DtGttListVORowImpl) createListVO.createRow();
                    listRow.setName(createSupplyRow.getListNameAttr());
                    listRow.setType(createSupplyRow.getWorkingLevelAttr());
                    listRow.setSubType(Constants.WAREHOUSE_SUB_TYPE);
                    /* Commented by Arun - Need to be added in future*/
                    //listRow.setPrivacy(createSupplyRow.getListPrivacyAttr());
                    listRow.setPrivacy(Constants.LIST_PRIVACY_PUBLIC);
                    listRow.setCode(warehouseCode);
                    listRow.setId(StringUtil.getJboNumberFromString(validIdCodeValuesMap.get(warehouseCode)));
                    createListVO.insertRow(listRow);
                }
            }

            else if (levelType != null && levelType.equalsIgnoreCase(Constants.WORKING_INFO_ITEM)) {
                ItemLevelFilterROVOImpl itemLevelFilterROVO = getItemLevelFilterROVO();
                String subTypeValue = executeItemLevelSelection(codetemp);
                if (itemLevelFilterROVO.getRowCount() < Constants.RESULT_SET_SIZE) {
                    Row row;
                    if (createSupplyRow.getSKUCodeAttr() != null || createSupplyRow.getVPNOrColorCodeAttr() != null ||
                        createSupplyRow.getVPN() != null) {
                        while ((row = itemLevelFilterROVO.next()) != null) {
                            DtGttListVORowImpl listRow = (DtGttListVORowImpl) createListVO.createRow();
                            listRow.setName(createSupplyRow.getListNameAttr());
                            listRow.setType(createSupplyRow.getWorkingLevelAttr());
                            listRow.setSubType(subTypeValue);
                            /* Commented by Arun - Need to be added in future*/
                            //listRow.setPrivacy(createSupplyRow.getListPrivacyAttr());
                            listRow.setPrivacy(Constants.LIST_PRIVACY_PUBLIC);
                            listRow.setCode(row.getAttribute(Constants.COMMODITYCODE_ATTR).toString());
                            listRow.setId(StringUtil.getJboNumberFromString(row.getAttribute(Constants.COMMODITYID_ATTR).toString()));
                            createListVO.insertRow(listRow);
                        }
                    }
                } else {
                    returnValue =
                        AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                              Constants.REC_EXCEEDS_LIMIT);
                }
            }
            createListVO.setCurrentRowAtRangeIndex(0);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in createSearchListResult" + e);
        }
        return returnValue;
    }

    /**
     * Invoked when Item level working info selected
     * VPN,VPN Color, SKU
     * @param selected code values
     * @return subType
     */

    public String executeItemLevelSelection(String selectedCodeValues) {
        String subTypeValue = null;
        try {
            SupplyListCreationProgVOImpl supplyListCreationVo = getSupplyListCreationProgVO1();
            SupplyListCreationProgVORowImpl createSupplyRow =
                (SupplyListCreationProgVORowImpl) supplyListCreationVo.getCurrentRow();
            if (createSupplyRow != null) {
                String vpnCodeAttr = createSupplyRow.getVPN();
                String vpncolorCodeAttr = createSupplyRow.getVPNOrColorCodeAttr();
                String skuCodessssAttr = createSupplyRow.getSKUCodeAttr();

                ItemLevelFilterROVOImpl itemLevelFilterROVO = getItemLevelFilterROVO();
                itemLevelFilterROVO.setWhereClause(null);
                itemLevelFilterROVO.executeQuery();

                if (skuCodessssAttr != null) {
                    subTypeValue = Constants.SKU_SUB_TYPE;
                    itemLevelFilterROVO.setWhereClause(Constants.COMMODITY_CODE_IN + selectedCodeValues +
                                                       Constants.QUOTE_BRACE);
                    itemLevelFilterROVO.executeQuery();
                } else if (vpncolorCodeAttr != null) {
                    subTypeValue = Constants.VPN_COLOUR_SUB_TYPE;
                    itemLevelFilterROVO.setWhereClause(Constants.STYLE_COLOR_CODE_IN + selectedCodeValues +
                                                       Constants.QUOTE_BRACE);
                    itemLevelFilterROVO.executeQuery();
                } else if (vpnCodeAttr != null) {
                    subTypeValue = Constants.VPN_SUB_TYPE;
                    itemLevelFilterROVO.setWhereClause(Constants.STYLE_CODE_IN + selectedCodeValues +
                                                       Constants.QUOTE_BRACE);
                    itemLevelFilterROVO.getQuery();
                    itemLevelFilterROVO.executeQuery();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in executeItemLevelSelection" + e);
        }
        return subTypeValue;
    }

    /**
     * Invoked on the save button click
     * @param Code values
     */

    public String saveCreateList(String selectedValues) {

        try {
            AipdtRootAMImpl rootAM = (AipdtRootAMImpl) this.getRootApplicationModule();

            DBTransaction dbTransacion = rootAM.getDBTransaction();
            DtListHeadersVOImpl headerVO = getDtListHeadersVO();
            DtListDetailsVOImpl detailVO = getDtListDetailsVO();

            headerVO.executeEmptyRowSet();

            SupplyListCreationProgVOImpl supplyListCreationVo = getSupplyListCreationProgVO1();
            SupplyListCreationProgVORowImpl createSupplyRow =
                (SupplyListCreationProgVORowImpl) supplyListCreationVo.getCurrentRow();

            String codeValuesTemp = null;
            if (selectedValues.contains(Constants.SEMI_COLON)) {
                codeValuesTemp =
                    Constants.SINGLE_QUOTE + selectedValues.replace(Constants.SEMI_COLON, Constants.QUOTE_COMMA);
            } else {
                codeValuesTemp = Constants.SINGLE_QUOTE + selectedValues;
            }
            LinkedHashMap<String, String> codeIdValuesMap = new LinkedHashMap<String, String>();
            codeIdValuesMap = fetchIdsFromDtListDetailTable(createSupplyRow.getWorkingLevelAttr(), codeValuesTemp);

            List<String> selectedCodeList = StringUtil.getListFromString(selectedValues, Constants.SEMI_COLON);
            List<String> selectedCodeListfinal = new ArrayList<String>();

            for (String codeValue : selectedCodeList) {
                selectedCodeListfinal.add(codeIdValuesMap.get(codeValue));
            }

            oracle.jbo.domain.Number transactionId = null;
            SequenceImpl seq = new SequenceImpl(Constants.DT_SEQ_LIST_HEADER, dbTransacion);
            transactionId = seq.getSequenceNumber();

            String vpnCodeAttr = createSupplyRow.getVPN();
            String vpncolorCodeAttr = createSupplyRow.getVPNOrColorCodeAttr();
            String skuCodessssAttr = createSupplyRow.getSKUCodeAttr();

            //Set Header Attributes
            Long timeStamp = new java.util.Date().getTime();

            NameValuePairs nvpHeader = new NameValuePairs();
            nvpHeader.setAttribute(Constants.ID_ATTR, transactionId);
            nvpHeader.setAttribute(Constants.NAME_ATTR, createSupplyRow.getListNameAttr());
            nvpHeader.setAttribute(Constants.TYPE_ATTR, createSupplyRow.getWorkingLevelAttr());

            if (Constants.WORKING_INFO_ITEM.equalsIgnoreCase(createSupplyRow.getWorkingLevelAttr())) {
                if (skuCodessssAttr != null) {
                    nvpHeader.setAttribute(Constants.SUB_TYPE_ATTR, Constants.SKU_SUB_TYPE);
                } else if (vpncolorCodeAttr != null) {
                    nvpHeader.setAttribute(Constants.SUB_TYPE_ATTR, Constants.VPN_COLOUR_SUB_TYPE);
                } else if (vpnCodeAttr != null) {
                    nvpHeader.setAttribute(Constants.SUB_TYPE_ATTR, Constants.VPN_SUB_TYPE);
                }
            } else {
                nvpHeader.setAttribute(Constants.SUB_TYPE_ATTR, createSupplyRow.getWorkingLevelAttr());
            }
            /* Commented by Arun - Need to be added in future*/
           // nvpHeader.setAttribute(Constants.PRIVACY_ATTR, createSupplyRow.getListPrivacyAttr());
            nvpHeader.setAttribute(Constants.PRIVACY_ATTR, Constants.LIST_PRIVACY_PUBLIC);
            nvpHeader.setAttribute(Constants.IS_DELETED_ATTR, Constants.NO);
            nvpHeader.setAttribute(Constants.IS_AUTO_LIST_ATTR, Constants.NO);
            nvpHeader.setAttribute(Constants.TIME_STAMP_ATTR, StringUtil.getJboNumberFromString(timeStamp.toString()));
            nvpHeader.setAttribute(Constants.CREATE_USER_ATTR, AipdtModelUtil.getLoggedInUserName());
            nvpHeader.setAttribute(Constants.CREATE_DATE_ATTR,
                                   AipdtModelUtil.getOracleJboDomainDate(new java.util.Date()));

            headerVO.createAndInitRow(nvpHeader);

            detailVO.executeEmptyRowSet();

            NameValuePairs nvpDetail = new NameValuePairs();
            if (Constants.WORKING_INFO_ITEM.equals(createSupplyRow.getWorkingLevelAttr())) {
                executeItemLevelSelection(codeValuesTemp);
                ItemLevelFilterROVOImpl itemLevelFilterROVO = getItemLevelFilterROVO();
                Row row;
                if (skuCodessssAttr != null || vpncolorCodeAttr != null || vpnCodeAttr != null) {
                    while ((row = itemLevelFilterROVO.next()) != null) {
                        if (logger.isInfo())
                            logger.info("saveList(): Set Detail Table Values for Item");
                        nvpDetail.setAttribute(Constants.LIST_ID_ATTR, transactionId);
                        nvpDetail.setAttribute(Constants.COMMODITYID_ATTR,
                                               row.getAttribute(Constants.COMMODITYID_ATTR));
                        detailVO.createAndInitRow(nvpDetail);
                    }
                }
            } else if (Constants.WORKING_INFO_STORE.equals(createSupplyRow.getWorkingLevelAttr())) {
                if (logger.isInfo())
                    logger.info("saveList(): Set Detail Table Values for Store");
                for (String storeId : selectedCodeListfinal) {
                    nvpDetail.setAttribute(Constants.LIST_ID_ATTR, transactionId);
                    nvpDetail.setAttribute(Constants.STORE_ID_ATTR, StringUtil.getJboNumberFromString(storeId));
                    detailVO.createAndInitRow(nvpDetail);
                }
            } else if (Constants.WORKING_INFO_WAREHOUSE.equals(createSupplyRow.getWorkingLevelAttr())) {
                if (logger.isInfo())
                    logger.info("saveList(): Set Detail Table Values for WareHouses");
                for (String storeId : selectedCodeListfinal) {
                    nvpDetail.setAttribute(Constants.LIST_ID_ATTR, transactionId);
                    nvpDetail.setAttribute(Constants.WAREHOUSE_ID_ATTR, StringUtil.getJboNumberFromString(storeId));
                    detailVO.createAndInitRow(nvpDetail);
                }
            }
            dbTransacion.commit();
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in saveCreateList" + e);
        }
        return null;
    }

    /**
     * Fetch the Id based on the code for Store and warehouse
     * @param List Type
     * @param Code Values
     */

    public LinkedHashMap fetchIdsFromDtListDetailTable(String listType, String selectedListCode) {
        String query = null;
        LinkedHashMap<String, String> validDestStoreTempMap = new LinkedHashMap<String, String>();
        try {
            if (listType != null && !listType.equalsIgnoreCase(Constants.WORKING_INFO_ITEM)) {

                if (listType != null && listType.equalsIgnoreCase(Constants.STORE_SUB_TYPE)) {
                    query = Constants.STORE_QUERY + selectedListCode + Constants.QUOTE_BRACE;
                } else if (listType != null && listType.equalsIgnoreCase(Constants.WAREHOUSE_SUB_TYPE)) {
                    query = Constants.WAREHOUSE_QUERY + selectedListCode + Constants.QUOTE_BRACE;
                }
                ResultSet rs;
                try {
                    ApplicationModuleImpl rootAM = getRootApplicationModule();
                    rs = rootAM.getDBTransaction().createStatement(0).executeQuery(query);
                    while (rs.next()) {
                        validDestStoreTempMap.put(rs.getObject(2).toString(), rs.getObject(1).toString());
                    }
                    rs.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in fetchIdsFromDtListDetailTable" + e);
        }
        return validDestStoreTempMap;
    }

    /**
     * To validate the duplicate values of list name
     * @param null
     */

    public boolean validateListNameDuplicate() {
        boolean isValid = Boolean.TRUE;
        String listNameValue = null;
        try {
            SupplyListCreationProgVOImpl supplyListCreationVo = getSupplyListCreationProgVO1();
            SupplyListCreationProgVORowImpl createSupplyRow =
                (SupplyListCreationProgVORowImpl) supplyListCreationVo.getCurrentRow();
            if (createSupplyRow != null) {
                listNameValue = createSupplyRow.getListNameAttr();
            }
            ViewObject listHeaderRoVo = this.getDtListHdrROVO();
            listHeaderRoVo.applyViewCriteria(null);
            listHeaderRoVo.executeQuery();
            if (listNameValue != null) {
                ViewCriteria listNameViewCriteria =
                    listHeaderRoVo.getViewCriteriaManager().getViewCriteria(Constants.LIST_HDR_VC);

                VariableValueManager vm = listHeaderRoVo.ensureVariableManager();
                vm.setVariableValue(Constants.LIST_NAME_BIND, listNameValue);
                listNameViewCriteria.setVariableManager(vm);
                listHeaderRoVo.applyViewCriteria(listNameViewCriteria);
                listHeaderRoVo.executeQuery();
                if (listHeaderRoVo.getEstimatedRowCount() > 0) {
                    isValid = Boolean.FALSE;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in validateListNameDuplicate" + e);
        }
        return isValid;
    }

    /**
     * This method filters Store ViewObject based on given RegionId.
     * @param regId
     */

    public void filterStoreVO(String regId) {
        try {

            SupplyListCreationProgVOImpl supplyListCreationVo = getSupplyListCreationProgVO1();
            SupplyListCreationProgVORowImpl createSupplyRow =
                (SupplyListCreationProgVORowImpl) supplyListCreationVo.getCurrentRow();
            oracle.jbo.domain.Number regIdVal = null;
            regIdVal = createSupplyRow.getRegionIdAttr();
            ViewObject vo = getSupplyListCreationProgVO1();
            if (vo != null) {
                SupplyListCreationProgVORowImpl roImpl = (SupplyListCreationProgVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject storeVO = roImpl.getStoreRegionVOA().getViewObject();
                    if (storeVO != null && regIdVal != null) {
                        ViewCriteria storeVC =
                            storeVO.getViewCriteriaManager().getViewCriteria(Constants.STORE_REGION_VC);
                        VariableValueManager vm = storeVO.ensureVariableManager();
                        vm.setVariableValue(Constants.REGION_ID_VC_REFERENCE, regIdVal);
                        storeVC.setVariableManager(vm);
                        storeVO.applyViewCriteria(storeVC);
                        storeVO.executeQuery();
                        logger.info("Store VO rowCount after filter based on RegionId value :" +
                                    storeVO.getEstimatedRowCount());
                    } else {
                        logger.info("LOV ViewObject is empty");
                        storeVO.applyViewCriteria(null);
                        storeVO.executeQuery();
                    }
                } else {
                    logger.info("rowImpl is null");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in filterStoreVO" + e);
        }
    }
}


