package oracle.retail.apps.aipdt.rsos.model.applicationmodule;

import java.math.BigDecimal;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;

import oracle.jbo.server.DBTransaction;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.DtListDetail;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewObjectImpl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.common.model.util.StringUtil;
import oracle.retail.apps.aipdt.rsos.model.applicationmodule.common.RsOrderScheduleAM;
import oracle.retail.apps.aipdt.rsos.model.view.RsOrderScheduleProgVOImpl;
import oracle.retail.apps.aipdt.rsos.model.view.RsOrderScheduleProgVORowImpl;
import oracle.retail.apps.aipdt.xdos.model.view.XDOrderScheduleSearchVORowImpl;
import oracle.retail.apps.aipdt.xdos.sql.type.DtXdwhRcSearchRec;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
import oracle.retail.apps.framework.jdbc.util.SQLParam;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 23 18:01:13 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RsOrderScheduleAMImpl extends AipdtApplicationModuleImpl implements RsOrderScheduleAM {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(RsOrderScheduleAMImpl.class);
    
    private final static String PLSQL_SEARCH_XDOS = "DT_XDWH_ORDER_CYCLE.XDWH_SEARCH";

    private final static String PLSQL_SAVE_XDOS = "DT_XDWH_ORDER_CYCLE.XDWH_SAVE_RELEASE_CYCLE";
    
    /**
     * This is the default constructor (do not remove).
     */
    public RsOrderScheduleAMImpl() {
    }
    
    /**
     * Container's getter for RsOrderScheduleProgVO1.
     * @return RsOrderScheduleProgVO1
     */
    public RsOrderScheduleProgVOImpl getRsOrderScheduleProgVO() {
        return (RsOrderScheduleProgVOImpl) findViewObject("RsOrderScheduleProgVO");
    }
    
    public void initRsOrderSchedule(){
        try {
            ViewObject rsOrderScheduleVO = null;
            Row whToStMatrixRow = null;

            rsOrderScheduleVO = this.getRsOrderScheduleProgVO();
            if (rsOrderScheduleVO != null) {
                whToStMatrixRow = rsOrderScheduleVO.createRow();
                if (whToStMatrixRow != null) {
                    whToStMatrixRow.setAttribute(Constants.ROW_VAL_ATTR, Math.random());
                }
                rsOrderScheduleVO.insertRow(whToStMatrixRow);
                rsOrderScheduleVO.setCurrentRow(whToStMatrixRow);
            }
        
            AipdtViewObjectImpl rsosResultsVO = getRsOrderScheduleResultVO();
            rsosResultsVO.setWhereClause(null);
            rsosResultsVO.setWhereClause(Constants.RESET_WHERE_VALUE);
            rsosResultsVO.executeQuery();
            rsosResultsVO.executeEmptyRowSet();
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in initCreateListActivity" + e);
        }
        
    }
    
    /**
     * This method filters Store ViewObject based on given RegionId.
     * @param regId
     */

    public void filterStoreVO(String regId) {
        try {
            ViewObject vo = getRsOrderScheduleProgVO();
            if (vo != null) {
                RsOrderScheduleProgVORowImpl roImpl = (RsOrderScheduleProgVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject storeVO = roImpl.getStoreRegionVOA().getViewObject();
                    if (storeVO != null && regId != null) {
                        ViewCriteria storeVC =
                            storeVO.getViewCriteriaManager().getViewCriteria("StoreRegionVOCriteria");
                        VariableValueManager vm = storeVO.ensureVariableManager();
                        vm.setVariableValue("regId", Integer.valueOf(regId));
                        storeVC.setVariableManager(vm);
                        storeVO.applyViewCriteria(storeVC);
                        storeVO.executeQuery();
                        System.out.println("Store VO rowCount after filter based on RegionId value :" +
                                           storeVO.getEstimatedRowCount());
                    } else {
                        System.out.println("LOV ViewObject is empty");
                        storeVO.applyViewCriteria(null);
                        storeVO.executeQuery();
                    }
                } else {
                    System.out.println("rowImpl is null");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method resets ViewObjects.
     */

    public void handleReset() {
        try {
            //ViewObject resultsVO = getXDOrderScheduleResultsVO1();
            /*ViewObject searchVO = getXDOrderScheduleSearchVO1();

            XDOrderScheduleSearchVORowImpl roImpl = (XDOrderScheduleSearchVORowImpl) searchVO.getCurrentRow();
            ViewObject supplierVO = roImpl.getDeptOrdFromSuppVOA().getViewObject();
            ViewObject storeVO = roImpl.getStoreRegionVOA().getViewObject();

            if (supplierVO != null) {
                supplierVO.setWhereClause(null);
                supplierVO.applyViewCriteria(null);
                supplierVO.executeQuery();
            }
            if (storeVO != null) {
                storeVO.applyViewCriteria(null);
                storeVO.setWhereClause(null);
                storeVO.executeQuery();
            }*/
            //if (getDBTransaction().isDirty()) {
                getDBTransaction().rollback();
                //resultsVO.clearEntityObjectCache();
            //}
            initRsOrderSchedule();

            //if (resultsVO != null) {
                //String whereClause = "1 = 2";
                //resultsVO.setWhereClause(whereClause);
                //resultsVO.executeQuery();
                //resultsVO.clearCache();
            //}
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String getIdsFromDtListDetailTable(Integer itemList, String type) {
        String itemVal = null;
        if (type != null && type.equals("ITEM_LIST")) {
            itemVal = AipdtModelUtil.fetchIdsFromDtListDetailTable(itemList, DtListDetail.COMMODITY_ID.toString());
        } else if (type != null && type.equals("STORE_LIST")) {
            itemVal = AipdtModelUtil.fetchIdsFromDtListDetailTable(itemList, DtListDetail.STORE_ID.toString());
        }
        return itemVal;
    }

    public String getSupplierIdFromCode(String supplierCode, String deptId) {
        ResultSet rs;
        String suppId = null;
        try {
            String query =
                "select supplier_id from V_DT_DEPT_ORD_FROM_SUPP where supplier_code = '" + supplierCode +
                "' and rownum=1";
            if (deptId != null) {
                query = query + " AND department_id = " + Integer.valueOf(deptId);
            }

            rs = this.getDBTransaction().createStatement(0).executeQuery(query);
            if (rs.next()) {
                suppId = String.valueOf(rs.getObject(1));
            }
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        }

        return suppId;
    }
    
    
    /**
     * Stages records with the helper method and queries the results back on UI
     * @return
     */
    public boolean handleSearch(Map<String, String> inputSearchCriteria) {
        logger.info("****** Inside handleSearch method ******");
        if((inputSearchCriteria == null) || inputSearchCriteria.isEmpty()){
            logger.warning("No input data received for search.");   
            return false;
        }
        RsOSInputDataBean rsosBean = prepareRsOSInputDateBean();
        //Stage records
        logger.info("Staging records...");
        
        stageRecords(rsosBean);

        //Querying results
        AipdtViewObjectImpl rsosResultsVO = getRsOrderScheduleResultVO();
        rsosResultsVO.applyViewCriteria(null);
        rsosResultsVO.setWhereClause(null);
        rsosResultsVO.executeQuery();
        logger.info("Total Result records fetched : " + rsosResultsVO.getEstimatedRowCount());
        //Search - End
        return (rsosResultsVO.getEstimatedRowCount() > 0);
    }
    
    /**
     * Helper method to stage the records into GTT table
     */
    private void stageRecords(RsOSInputDataBean rsosBean){
        logger.info("****** Inside stageRecords method *******");
        try {
            DtXdwhRcSearchRec stgObj = new DtXdwhRcSearchRec();
            stgObj.setSelectionLevel(new BigDecimal(rsosBean.getSelectionLevel()));
            stgObj.setDepartmentId(new BigDecimal(rsosBean.getDepartmentId()));
            stgObj.setClassId(rsosBean.getClassId());
            stgObj.setSubclassId(rsosBean.getSubclassId());
            stgObj.setStyleId(rsosBean.getStyleId());
            stgObj.setStyleColorId(rsosBean.getStyleColorId());
            stgObj.setCommodityId(rsosBean.getCommodityId());
            stgObj.setSupplierId(!StringUtil.isNullOrEmpty(rsosBean.getSupplierId()) ? new BigDecimal(rsosBean.getSupplierId()) : null);
            stgObj.setStockingPointId(new BigDecimal(rsosBean.getStockingpointId()));
            //stgObj.setRegionId(new BigDecimal(xdosBean.getRegionId()));
            stgObj.setStoreId(rsosBean.getStoreId());
            stgObj.setCreateUser(AipdtModelUtil.getUserName());

            DBTransaction dbTransaction = getDBTransaction();

            SQLParam tblArrParam =
                new SQLParam(stgObj, ParamType.IN, Types.STRUCT, DtXdwhRcSearchRec._SQL_NAME,
                             DtXdwhRcSearchRec.getORADataFactory());
            SQLParam errorCodeParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);
            Integer plSqlCallStatus = null;
            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransaction, PLSQL_SEARCH_XDOS, Types.INTEGER, tblArrParam,
                                                         errorCodeParam);
            if (plSqlCallStatus == 0) {
                logger.info("PLSQL function : " + PLSQL_SEARCH_XDOS + " returned True.");
                dbTransaction.commit();
            } else {
                logger.severe("PLSQL function : " + PLSQL_SEARCH_XDOS + " returned False.");
                String o_errorCode =
                    (errorCodeParam != null) ? (String) errorCodeParam.getValue() :
                    AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE, Constants.DEAFULT_ERROR_MSG);
                logger.severe(o_errorCode);
                JboException jboEx = new JboException(o_errorCode);
                throw jboEx;
            }
        } catch (JboException jboEx) {
            throw jboEx;
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.severe(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                Constants.NP_ERROR_INSERT_STAGE_DATA));
           // throw ex;
        }
    }
    
    /**
     * This method filters SupplierLOV ViewObject based on given DepartmentId.
     * @param regId
     */

    public void filterSupplierLOVVO(String deptId) {
        try {
            ViewObject vo = getRsOrderScheduleProgVO();
            if (vo != null) {
                RsOrderScheduleProgVORowImpl roImpl = (RsOrderScheduleProgVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject supplierVO = roImpl.getDeptOrdFromSuppVOA().getViewObject();
                    if (supplierVO != null) {
                        if (!StringUtil.isNullOrEmpty(deptId)) {
                            String whereClause = "DEPARTMENT_ID IN(" + Integer.valueOf(deptId) + ")";
                            supplierVO.setWhereClause(whereClause);
                            supplierVO.executeQuery();
                            System.out.println("Supplier VO rowCount after filter based on RegionId value :" +
                                               supplierVO.getEstimatedRowCount());
                        } else {
                            supplierVO.setWhereClause(null);
                            supplierVO.executeQuery();
                        }
                    } else {
                        System.out.println("LOV ViewObject is empty");
                    }
                } else {
                    System.out.println("rowImpl is null");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Prepare a bean with input data received from XD Order Schedule search screen
     * @return
     */
    private RsOSInputDataBean prepareRsOSInputDateBean() {
        logger.info("****** Inside prepareXDOSInputDateBean method ******");
        //Read input data
        String departmentId = null;
        String stockingpointId = null;
        AipdtViewObjectImpl npVO = getRsOrderScheduleProgVO();
        RsOrderScheduleProgVORowImpl currentRow = (RsOrderScheduleProgVORowImpl) npVO.getCurrentRow();

        String selectionLevel = currentRow.getSelectionLevel();
        oracle.jbo.domain.Number department = currentRow.getDepartment();
        if(department != null){
        departmentId = department.toString();
        }
        String classId = currentRow.getClassAttr();
        String subclassId = currentRow.getSubclassAttr();
        String styleId = currentRow.getVPN();
        String styleColorId = currentRow.getVPNColorAttr();
        String commodityId = currentRow.getSKUAttr();
        String supplierId = currentRow.getSupplier();
        oracle.jbo.domain.Number stockingpoint = currentRow.getWarehouse();
        if(stockingpoint != null){
         stockingpointId = stockingpoint.toString();
        }
        String regionId = currentRow.getRegion();
        String storeId = currentRow.getStore();

        System.err.println("*************FROM AMImpl**********************");
        System.err.println("Selection Level = " + currentRow.getSelectionLevel());
        System.err.println("Department = " + currentRow.getDepartment());
        System.err.println("Class = " + currentRow.getClassAttr());
        System.err.println("Subclass = " + currentRow.getSubclassAttr());
        System.err.println("VPN = " + currentRow.getVPN());
        System.err.println("Style Color = " + currentRow.getVPNColorAttr());
        System.err.println("Item = " + currentRow.getSKUAttr());
        System.err.println("Supplier = " + currentRow.getSupplier());
        System.err.println("Warehouse = " + currentRow.getWarehouse());
        System.err.println("Region = " + currentRow.getRegion());
        System.err.println("Store = " + currentRow.getStore());

        //Validate Input
        //TODO :

        //Preparing Input Data Bean
        RsOSInputDataBean rsosBean = new RsOSInputDataBean();
        rsosBean.setSelectionLevel(selectionLevel);
        rsosBean.setDepartmentId(departmentId);
        rsosBean.setClassId(classId);
        rsosBean.setSubclassId(subclassId);
        rsosBean.setStyleId(styleId);
        rsosBean.setStyleColorId(styleColorId);
        rsosBean.setCommodityId(commodityId);
        rsosBean.setSupplierId(supplierId);
        rsosBean.setStockingpointId(stockingpointId);
        rsosBean.setRegionId(regionId);
        rsosBean.setStoreId(storeId);
        rsosBean.setCreateUser(AipdtModelUtil.getUserName());

        return rsosBean;
    }
    
    /**
     * Selects / Deselects all the records based on the 'All' check box selection on the table column header
     * in XDOS Results section.
     * @param isSelected
     * @return
     */
    public long handleCheckBoxAll(boolean isSelected) {
        logger.info("****** Inside handleCheckBoxAll method ******");
        AipdtViewObjectImpl xdosResultsVO = getRsOrderScheduleResultVO();
        RowSetIterator resultsRowset = xdosResultsVO.createRowSetIterator(null);
        resultsRowset.reset();
        while (resultsRowset.hasNext()) {
            Row resultsRow = resultsRowset.next();
            resultsRow.setAttribute(Constants.UPDATE_IND_ATTR,
                                    isSelected ? Constants.UPDATE_IND_1 : Constants.UPDATE_IND_0);
        }
        resultsRowset.closeRowSetIterator();
        long rowCount =xdosResultsVO.getEstimatedRowCount();
        return rowCount;
    }


    /**
     * Container's getter for RsOrderScheduleResultVO1.
     * @return RsOrderScheduleResultVO1
     */
    public AipdtViewObjectImpl getRsOrderScheduleResultVO() {
        return (AipdtViewObjectImpl) findViewObject("RsOrderScheduleResultVO");
    }

    /**
     * Bean class to hold the input data received from RS Order Schedule Search screen
     */
    private class RsOSInputDataBean {
        private String departmentId;
        private String supplierId;
        private String stockingpointId;
        private String classId;
        private String subclassId;
        private String styleId;
        private String styleColorId;
        private String commodityId;
        private String storeId;
        private String regionId;
        private String selectionLevel;
        private String createUser;

        public void setDepartmentId(String departmentId) {
            this.departmentId = departmentId;
        }

        public String getDepartmentId() {
            return departmentId;
        }

        public void setSupplierId(String supplierId) {
            this.supplierId = supplierId;
        }

        public String getSupplierId() {
            return supplierId;
        }

        public void setStockingpointId(String stockingpointId) {
            this.stockingpointId = stockingpointId;
        }

        public String getStockingpointId() {
            return stockingpointId;
        }

        public void setClassId(String classId) {
            this.classId = classId;
        }

        public String getClassId() {
            return classId;
        }

        public void setSubclassId(String subclassId) {
            this.subclassId = subclassId;
        }

        public String getSubclassId() {
            return subclassId;
        }

        public void setStyleId(String styleId) {
            this.styleId = styleId;
        }

        public String getStyleId() {
            return styleId;
        }

        public void setStyleColorId(String styleColorId) {
            this.styleColorId = styleColorId;
        }

        public String getStyleColorId() {
            return styleColorId;
        }

        public void setCommodityId(String commodityId) {
            this.commodityId = commodityId;
        }

        public String getCommodityId() {
            return commodityId;
        }

        public void setStoreId(String storeId) {
            this.storeId = storeId;
        }

        public String getStoreId() {
            return storeId;
        }

        public void setRegionId(String regionId) {
            this.regionId = regionId;
        }

        public String getRegionId() {
            return regionId;
        }

        public void setSelectionLevel(String selectionLevel) {
            this.selectionLevel = selectionLevel;
        }

        public String getSelectionLevel() {
            return selectionLevel;
        }

        public void setCreateUser(String createUser) {
            this.createUser = createUser;
        }

        public String getCreateUser() {
            return createUser;
        }
    }

    
   
}

