package oracle.retail.apps.aipdt.np.model.applicationmodule;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.DBTransaction;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewObjectImpl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtNpSearchRec;
import oracle.retail.apps.aipdt.common.jdbc.type.DtNpSearchTbl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.common.model.util.StringUtil;
import oracle.retail.apps.aipdt.common.model.view.StockingPointVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreVOImpl;
import oracle.retail.apps.aipdt.common.model.view.SupplierVOImpl;
import oracle.retail.apps.aipdt.np.model.applicationmodule.common.NetworkPathAM;
import oracle.retail.apps.aipdt.np.model.view.NetworkPathResultsVOImpl;
import oracle.retail.apps.aipdt.np.model.view.NetworkPathResultsVORowImpl;
import oracle.retail.apps.aipdt.np.model.view.NetworkPathSearchVOImpl;
import oracle.retail.apps.aipdt.np.model.view.NetworkPathSearchVORowImpl;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
import oracle.retail.apps.framework.jdbc.util.SQLParam;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 12 19:30:53 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NetworkPathAMImpl extends AipdtApplicationModuleImpl implements NetworkPathAM {

    private final static ADFLogger logger = ADFLogger.createADFLogger(NetworkPathAMImpl.class);

    private final static String PLSQL_SEARCH_NETWORK_PATH = "DT_NETWORK_PATH_SQL.SEARCH_NETWORK_PATH";

    private final static String PLSQL_SAVE_NETWORK_PATH = "DT_NETWORK_PATH_SQL.SAVE_NETWORK_PATH";

    /**
     * This is the default constructor (do not remove).
     */
    public NetworkPathAMImpl() {
    }

    /**
     * Container's getter for NetworkPathSearchVO1.
     * @return NetworkPathSearchVO1
     */
    public NetworkPathSearchVOImpl getNetworkPathSearchVO1() {
        return (NetworkPathSearchVOImpl) findViewObject("NetworkPathSearchVO1");
    }

    /**
     * Container's getter for DestinationTypeVO1.
     * @return DestinationTypeVO1
     */
    public AipdtViewObjectImpl getDestinationTypeVO1() {
        return (AipdtViewObjectImpl) findViewObject("DestinationTypeVO1");
    }

    /**
     * Container's getter for SourceTypeVO1.
     * @return SourceTypeVO1
     */
    public AipdtViewObjectImpl getSourceTypeVO1() {
        return (AipdtViewObjectImpl) findViewObject("SourceTypeVO1");
    }

    /**
     * Container's getter for StoreVO1.
     * @return StoreVO1
     */
    public StoreVOImpl getStoreVO1() {
        return (StoreVOImpl) findViewObject("StoreVO1");
    }

    /**
     * Container's getter for StockingPointVO1.
     * @return StockingPointVO1
     */
    public StockingPointVOImpl getStockingPointVO1() {
        return (StockingPointVOImpl) findViewObject("StockingPointVO1");
    }

    /**
     * Container's getter for SupplierVO1.
     * @return SupplierVO1
     */
    public SupplierVOImpl getSupplierVO1() {
        return (SupplierVOImpl) findViewObject("SupplierVO1");
    }

    /**
     * Container's getter for WarehouseTypeVO3.
     * @return WarehouseTypeVO3
     */
    public AipdtViewObjectImpl getWarehouseTypeVO1() {
        return (AipdtViewObjectImpl) findViewObject("WarehouseTypeVO1");
    }

    /**
     * Container's getter for NetworkPathResultsView1.
     * @return NetworkPathResultsView1
     */
    public NetworkPathResultsVOImpl getNetworkPathResultsVO1() {
        return (NetworkPathResultsVOImpl) findViewObject("NetworkPathResultsVO1");
    }

    /**
     * Container's getter for ReservedStockWarehouseVO1.
     * @return ReservedStockWarehouseVO1
     */
    public AipdtViewObjectImpl getReservedStockWHVO1() {
        return (AipdtViewObjectImpl) findViewObject("ReservedStockWHVO1");
    }

    /**
     * Container's getter for FrequencyVO1.
     * @return FrequencyVO1
     */
    public AipdtViewObjectImpl getFrequencyVO1() {
        return (AipdtViewObjectImpl) findViewObject("FrequencyVO1");
    }

    /**
     * Initializes the taskflow
     */
    @SuppressWarnings("oracle.jdeveloper.java.unchecked-conversion-or-cast")
    public void initNetworkPath() {
        logger.info("****** Inside initNetworkPath method ******");
        AipdtViewObjectImpl npSearchVO = getNetworkPathSearchVO1();
        npSearchVO.executeEmptyRowSet();
        Row row = npSearchVO.createRow();
        npSearchVO.insertRow(row);
        npSearchVO.setCurrentRow(row);

        //Initialize results form
        AipdtViewObjectImpl dtNPVO = getNetworkPathResultsVO1();
        dtNPVO.setWhereClause(null);
        dtNPVO.setWhereClause("1=2");
        dtNPVO.executeQuery();
        dtNPVO.executeEmptyRowSet();

        //Reading destination warehouse enable flag and keeping it in the pageFlow scope for UI to use
        String dstWhEnableFlag = AipdtModelUtil.getDtSysParamValue(Constants.NP_DST_RS_WH_ENABLE);
        ADFContext.getCurrent().getPageFlowScope().put(Constants.NP_DST_RS_WH_ENABLE, dstWhEnableFlag);
    }

    /**
     * Prepare a bean with input data received from network path search screen
     * @return
     */
    private NPInputDataBean prepareNPInputDateBean() {
        logger.info("****** Inside prepareNPInputDateBean method ******");
        //Read input data
        AipdtViewObjectImpl npVO = getNetworkPathSearchVO1();
        NetworkPathSearchVORowImpl currentRow = (NetworkPathSearchVORowImpl) npVO.getCurrentRow();
        String sourceSelectionType = null;
        Set<String> sourceIdSet = null;
        String srcWhType = currentRow.getSrcWhType();
        if (StringUtil.isNullOrEmpty(srcWhType)) {
            JboException jboEx =
                new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.NP_INPUT_SOURCE_WH_TYPE_INVALID));
            logger.severe(jboEx.getLocalizedMessage());
            throw jboEx;
        }
        //Reading source warehouseType
        String srcWarehousesSelected = currentRow.getSrcWarehouse();
        if (StringUtil.isNullOrEmpty(srcWarehousesSelected)) {
            JboException jboEx =
                new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.NP_INPUT_SOURCE_WH_INVALID));
            logger.severe(jboEx.getLocalizedMessage());
            throw jboEx;
        } else {
            sourceIdSet = StringUtil.getSetFromString(srcWarehousesSelected, Constants.SEMI_COLON);
        }

        String dstWhType = null;
        String destinationSelectionType = null;
        Set<String> destinationIdSet = null;
        String storesSelected = currentRow.getStore();
        String dstWarehousesSelected = currentRow.getDstWarehouse();
        if (StringUtil.isNullOrEmpty(storesSelected) && StringUtil.isNullOrEmpty(dstWarehousesSelected)) {
            JboException jboEx =
                new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.NP_INPUT_DEST_INVALID));
            logger.severe(jboEx.getLocalizedMessage());
            throw jboEx;
        }
        if (StringUtil.isNullOrEmpty(dstWarehousesSelected)) {
            dstWhType = Constants.STORE_CODE;
            StoreVOImpl storeVO = getStoreVO1();
            storeVO.applyViewCriteria(null);
            storeVO.setWhereClause(null);
            storeVO.executeQuery();
            long totalStores = storeVO.getEstimatedRowCount();
            destinationIdSet = StringUtil.getSetFromString(storesSelected, Constants.SEMI_COLON);
            logger.info("Total number of unique stores selected : " + destinationIdSet.size());
            if (totalStores == destinationIdSet.size()) {
                destinationSelectionType = Constants.ALL_CODE;
            }
        } else {
            dstWhType = Constants.RESERVED_STOCK_CODE;
            AipdtViewObjectImpl rsVO = getReservedStockWHVO1();
            rsVO.applyViewCriteria(null);
            rsVO.setWhereClause(null);
            rsVO.executeQuery();
            long totalDstWarehouses = rsVO.getEstimatedRowCount();
            destinationIdSet = StringUtil.getSetFromString(dstWarehousesSelected, Constants.SEMI_COLON);
            logger.info("Total number of unique destination warehouses selected : " + destinationIdSet.size());
            if (totalDstWarehouses == destinationIdSet.size()) {
                destinationSelectionType = Constants.ALL_CODE;
            }
        }
        logger.info("Source Type : " + srcWhType);
        logger.info("Destination Type : " + dstWhType);
        logger.info("Source Selection Type : " + sourceSelectionType);
        logger.info("Destination Selection Type : " + destinationSelectionType);
        logger.info("Source Ids : " + sourceIdSet);
        logger.info("Destination Ids : " + destinationIdSet);

        //Preparing Input Data Bean
        NPInputDataBean npBean = new NPInputDataBean();
        npBean.setSourceType(srcWhType);
        npBean.setSourceSelectionType(sourceSelectionType);
        npBean.setSourceIdSet(sourceIdSet);
        npBean.setDestinationType(dstWhType);
        npBean.setDestinationSelectionType(destinationSelectionType);
        npBean.setDestinationIdSet(destinationIdSet);
        npBean.setCreateUser(AipdtModelUtil.getUserName());
        return npBean;
    }

    /**
     * Stages records with the helper method and queries the results back on UI
     * @return
     */
    public boolean handleSelect() throws Exception {
        logger.info("****** Inside handleSelect method ******");
        NPInputDataBean npBean = prepareNPInputDateBean();
        //Stage records
        logger.info("Staging records...");
        stageRecords(npBean);
        //Querying results
        NetworkPathResultsVOImpl dtNPVO = getNetworkPathResultsVO1();
        dtNPVO.applyViewCriteria(null);
        dtNPVO.setWhereClause(null);
        dtNPVO.executeQuery();
        logger.info("Total Result records fetched : " + dtNPVO.getEstimatedRowCount());
        //Search - End
        return (dtNPVO.getEstimatedRowCount() > 0);
    }

    /**
     * Helper method to stage the records into GTT table
     */
    private void stageRecords(NPInputDataBean npBean) throws Exception {
        logger.info("****** Inside stageRecords method *******");
        try {
            List<DtNpSearchRec> stgObjList = new ArrayList<DtNpSearchRec>();
            String sourceIds = null, destinationIds = null;
            if (isAllSelected(npBean.getSourceSelectionType())) {
                Set<String> destinationIdSet = npBean.getDestinationIdSet();
                if ((destinationIdSet == null) || destinationIdSet.isEmpty()) {
                    JboException jboEx =
                        new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                               Constants.NP_DESTINATION_NOT_FOUND));
                    logger.severe(jboEx.getLocalizedMessage());
                    throw jboEx;
                }
                destinationIds = StringUtil.getStringFromSet(destinationIdSet, Constants.SEMI_COLON);
            } else if (isAllSelected(npBean.getDestinationSelectionType())) {
                Set<String> sourceIdSet = npBean.getSourceIdSet();
                if ((sourceIdSet == null) || sourceIdSet.isEmpty()) {
                    JboException jboEx =
                        new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                               Constants.NP_SOURCE_NOT_FOUND));
                    logger.severe(jboEx.getLocalizedMessage());
                    throw jboEx;
                }
                sourceIds = StringUtil.getStringFromSet(sourceIdSet, Constants.SEMI_COLON);
            } else {
                Set<String> sourceIdSet = npBean.getSourceIdSet();
                if ((sourceIdSet == null) || sourceIdSet.isEmpty()) {
                    JboException jboEx =
                        new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                               Constants.NP_SOURCE_NOT_FOUND));
                    logger.severe(jboEx.getLocalizedMessage());
                    throw jboEx;
                }

                Set<String> destinationIdSet = npBean.getDestinationIdSet();
                if ((destinationIdSet == null) || destinationIdSet.isEmpty()) {
                    JboException jboEx =
                        new JboException(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                               Constants.NP_DESTINATION_NOT_FOUND));
                    logger.severe(jboEx.getLocalizedMessage());
                    throw jboEx;
                }
                sourceIds = StringUtil.getStringFromSet(sourceIdSet, Constants.SEMI_COLON);
                destinationIds = StringUtil.getStringFromSet(destinationIdSet, Constants.SEMI_COLON);
            }

            DtNpSearchRec stgObj = new DtNpSearchRec();
            stgObj.setSourceType(npBean.getSourceType());
            stgObj.setSourceSelType(npBean.getSourceSelectionType());
            stgObj.setSourceId(sourceIds);
            stgObj.setDestinationType(npBean.getDestinationType());
            stgObj.setDestSelType(npBean.getDestinationSelectionType());
            stgObj.setDestinationId(destinationIds);
            stgObj.setCreateUser(npBean.getCreateUser());

            stgObjList.add(stgObj);

            // get access to transaction
            //AipdtRootAMImpl rootAM = (AipdtRootAMImpl) getRootApplicationModule();
            DBTransaction dbTransaction = getDBTransaction();

            DtNpSearchTbl stgTbl = new DtNpSearchTbl(stgObjList.toArray(new DtNpSearchRec[stgObjList.size()]));
            SQLParam tblArrParam =
                new SQLParam(stgTbl, ParamType.IN, Types.ARRAY, DtNpSearchTbl._SQL_NAME,
                             DtNpSearchTbl.getORADataFactory());
            SQLParam errorCodeParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);
            Integer plSqlCallStatus = null;
            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransaction, PLSQL_SEARCH_NETWORK_PATH, Types.INTEGER,
                                                         tblArrParam, errorCodeParam);
            if (plSqlCallStatus == 0) {
                logger.info("PLSQL function : " + PLSQL_SEARCH_NETWORK_PATH + " returned True.");
                //dbTransaction.commit();
            } else {
                logger.severe("PLSQL function : " + PLSQL_SEARCH_NETWORK_PATH + " returned False.");
                String o_errorCode =
                    (errorCodeParam != null) ? (String) errorCodeParam.getValue() :
                    AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE, Constants.DEAFULT_ERROR_MSG);
                logger.severe(o_errorCode);
                JboException jboEx = new JboException(o_errorCode);
                throw jboEx;
            }
        } catch (JboException jboEx) {
            throw jboEx;
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.severe(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                Constants.NP_ERROR_INSERT_STAGE_DATA));
            throw ex;
        }
    }

    /**
     * Updates the staged network path records in the GTT table and invokes
     * the PLSQL function to merge the records into DT tables.
     */
    public void saveNetworkPath() throws Exception {
        logger.info("****** Inside saveNetworkPath method ******");
        NetworkPathResultsVOImpl resultsVO = getNetworkPathResultsVO1();
        NetworkPathResultsVORowImpl resultsRow = (NetworkPathResultsVORowImpl) resultsVO.first();
        if (resultsRow == null) {
            logger.warning("No records selected to save.");
            return;
        }
        BigDecimal transactionId = resultsRow.getTransactionId();
        try {
            getDBTransaction().postChanges();
            SQLParam transactionIdParam = new SQLParam(transactionId, ParamType.IN, Types.NUMERIC);
            SQLParam timeStampParam = new SQLParam(null, ParamType.OUT, Types.NUMERIC);
            SQLParam errorCodeParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);
            Integer plSqlCallStatus = null;
            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(getDBTransaction(), PLSQL_SAVE_NETWORK_PATH, Types.INTEGER,
                                                         transactionIdParam, timeStampParam, errorCodeParam);
            if (plSqlCallStatus == 0) {
                logger.info("PLSQL function : " + PLSQL_SAVE_NETWORK_PATH + " returned True.");
                getDBTransaction().commit();
            } else {
                logger.severe("PLSQL function : " + PLSQL_SAVE_NETWORK_PATH + " returned False.");
                String o_errorCode =
                    (errorCodeParam != null) ? (String) errorCodeParam.getValue() :
                    AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE, Constants.DEAFULT_ERROR_MSG);
                logger.severe(o_errorCode);
                JboException jboEx = new JboException(o_errorCode);
                throw jboEx;

            }
        } catch (JboException jboEx) {
            throw jboEx;
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.severe(AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                Constants.NP_ERROR_UPDATE_STAGE_DATA));
            throw ex;
        }
    }

    /**
     * Rollbacks the transaction and initializes the taskflow on click of Reset button.
     */
    public void handleReset() {
        logger.info("****** Inside handleReset method ******");
        if (getDBTransaction().isDirty()) {
            getDBTransaction().rollback();
        }
        initNetworkPath();
    }

    /**
     * Helper method to check All source/destination selected
     * @param selectionType
     * @return
     */
    private boolean isAllSelected(String selectionType) {
        logger.info("****** Inside isAllSelected method ******");
        if (Constants.ALL_CODE.equals(selectionType) || Constants.CROSSDOCK_CODE.equals(selectionType) ||
            Constants.RESERVED_STOCK_CODE.equals(selectionType)) {
            return true;
        }
        return false;
    }

    /**
     * Selects / Deselects all the records based on the 'All' check box selection on the table column header
     * in Network Path Results section.
     * @param isSelected
     * @return
     */
    public long handleCheckBoxAll(boolean isSelected) {
        logger.info("****** Inside handleCheckBoxAll method ******");
        NetworkPathResultsVOImpl npResultsVO = getNetworkPathResultsVO1();

        RowSetIterator resultsRowset = npResultsVO.createRowSetIterator(null);
        resultsRowset.reset();
        while (resultsRowset.hasNext()) {
            NetworkPathResultsVORowImpl resultsRow = (NetworkPathResultsVORowImpl) resultsRowset.next();
            resultsRow.setUpdateInd(isSelected ? Constants.UPDATE_IND_1 : Constants.UPDATE_IND_0);
        }
        resultsRowset.closeRowSetIterator();
        return npResultsVO.getEstimatedRowCount();
    }

    /**
     * Set all - updates all the selected records with set all value on results table
     * @param setAllMap
     */
    public void handleSetAll(Map<String, Object> setAllMap) {
        logger.info("****** Inside handleSetAll method ******");
        if ((setAllMap == null) || setAllMap.isEmpty()) {
            logger.warning("No set all value received.");
            return;
        }
        NetworkPathResultsVOImpl npResultsVO = getNetworkPathResultsVO1();
        Row[] resultsRows = npResultsVO.getFilteredRows(Constants.UPDATE_IND_ATTR, Constants.UPDATE_IND_1);
        if ((resultsRows == null) || (resultsRows.length == 0)) {
            logger.warning("No records selected to update.");
            return;
        }

        Map.Entry<String, Object> entry = setAllMap.entrySet().iterator().next();
        String setAllKey = entry.getKey();
        Object setAllValue = entry.getValue();

        Integer leadTime = null;
        java.sql.Date sqlEffectiveDate = null;
        if (setAllValue instanceof java.util.Date) {
            java.util.Date effectiveDate = (java.util.Date) setAllValue;
            if (effectiveDate != null) {
                sqlEffectiveDate = new java.sql.Date(effectiveDate.getTime());
            }
        } else if (setAllValue instanceof Integer) {
            leadTime = (Integer) setAllValue;
        }

        for (int rowIndex = 0; rowIndex < resultsRows.length; rowIndex++) {
            NetworkPathResultsVORowImpl resultsRow = (NetworkPathResultsVORowImpl) resultsRows[rowIndex];
            if (Constants.NP_SET_ALL_EFF_DATE_COMP_ID.equals(setAllKey)) {
                resultsRow.setEffectiveDate(sqlEffectiveDate);
            } else if (Constants.NP_SET_ALL_SUN_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setSundayLeadTime(leadTime);
            } else if (Constants.NP_SET_ALL_MON_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setMondayLeadTime(leadTime);
            } else if (Constants.NP_SET_ALL_TUE_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setTuesdayLeadTime(leadTime);
            } else if (Constants.NP_SET_ALL_WED_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setWednesdayLeadTime(leadTime);
            } else if (Constants.NP_SET_ALL_THU_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setThursdayLeadTime(leadTime);
            } else if (Constants.NP_SET_ALL_FRI_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setFridayLeadTime(leadTime);
            } else if (Constants.NP_SET_ALL_SAT_LD_COMP_ID.equals(setAllKey)) {
                resultsRow.setSaturdayLeadTime(leadTime);
            }
        }
    }

    /**
     * Bean class to hold the input data received from Network Path Search screen
     */
    private class NPInputDataBean {
        private String sourceType;
        private String sourceSelectionType;
        private Set<String> sourceIdSet;
        private String destinationType;
        private String destinationSelectionType;
        private Set<String> destinationIdSet;
        private String createUser;

        public void setSourceType(String sourceType) {
            this.sourceType = sourceType;
        }

        public String getSourceType() {
            return sourceType;
        }

        public void setSourceSelectionType(String sourceSelectionType) {
            this.sourceSelectionType = sourceSelectionType;
        }

        public String getSourceSelectionType() {
            return sourceSelectionType;
        }

        public void setSourceIdSet(Set<String> sourceIdSet) {
            this.sourceIdSet = sourceIdSet;
        }

        public Set<String> getSourceIdSet() {
            return sourceIdSet;
        }

        public void setDestinationType(String destinationType) {
            this.destinationType = destinationType;
        }

        public String getDestinationType() {
            return destinationType;
        }

        public void setDestinationSelectionType(String destinationSelectionType) {
            this.destinationSelectionType = destinationSelectionType;
        }

        public String getDestinationSelectionType() {
            return destinationSelectionType;
        }

        public void setDestinationIdSet(Set<String> destinationIdSet) {
            this.destinationIdSet = destinationIdSet;
        }

        public Set<String> getDestinationIdSet() {
            return destinationIdSet;
        }

        public void setCreateUser(String createUser) {
            this.createUser = createUser;
        }

        public String getCreateUser() {
            return createUser;
        }
    }
}
