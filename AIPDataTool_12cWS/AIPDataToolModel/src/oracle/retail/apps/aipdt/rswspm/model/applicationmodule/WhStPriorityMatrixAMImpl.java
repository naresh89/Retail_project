package oracle.retail.apps.aipdt.rswspm.model.applicationmodule;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.DBTransaction;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtWhToStPrMatSearchRec;
import oracle.retail.apps.aipdt.common.jdbc.type.DtWhToStPrMatSearchTbl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.rswspm.model.applicationmodule.common.WhStPriorityMatrixAM;
import oracle.retail.apps.aipdt.rswspm.model.view.StorePriorityMatrixVOImpl;
import oracle.retail.apps.aipdt.rswspm.model.view.StorePriorityMatrixVORowImpl;
import oracle.retail.apps.aipdt.rswspm.model.view.WhToStPriorityMatrixProgVOImpl;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
import oracle.retail.apps.framework.jdbc.util.SQLParam;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 09 15:11:51 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WhStPriorityMatrixAMImpl extends AipdtApplicationModuleImpl implements WhStPriorityMatrixAM {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(WhStPriorityMatrixAMImpl.class);
    private static int SUCCESS = 0;
    private static int FAIL = 1;
    private final static String ST_MATRIX_PLSQL_SEARCH_FUNCTION = "DT_WH_TO_ST_PR_MATRIX_SQL.SEARCH_WH_TO_ST_PR_MATRIX";
    private final static String ST_MATRIX_SAVE_FUNCTION = "DT_WH_TO_ST_PR_MATRIX_SQL.SAVE_WH_TO_ST_PR_MATRIX";
    /**
     * This is the default constructor (do not remove).
     */
    public WhStPriorityMatrixAMImpl() {
    }
    
    /**
     * Container's getter for WhToStPriorityMatrixProgVO1.
     * @return WhToStPriorityMatrixProgVO1
     */
    public WhToStPriorityMatrixProgVOImpl getWhToStPriorityMatrixProgVO() {
        return (WhToStPriorityMatrixProgVOImpl) findViewObject("WhToStPriorityMatrixProgVO");
    }

    /**
     * Container's getter for StorePriorityMatrixVO1.
     * @return StorePriorityMatrixVO1
     */
    public StorePriorityMatrixVOImpl getStorePriorityMatrixVO() {
        return (StorePriorityMatrixVOImpl) findViewObject("StorePriorityMatrixVO");
    }
    
    /**
     * Invoked on the screen render
     * @param null
     */

    public void initWhToStMatrix(){
        try {
            ViewObject whToStMatrixVo = null;
            Row whToStMatrixRow = null;

            whToStMatrixVo = this.getWhToStPriorityMatrixProgVO();
            if (whToStMatrixVo != null) {
                whToStMatrixRow = whToStMatrixVo.createRow();
                if (whToStMatrixRow != null) {
                    whToStMatrixRow.setAttribute(Constants.ROW_VAL_ATTR, Math.random());
                }
                whToStMatrixVo.insertRow(whToStMatrixRow);
                whToStMatrixVo.setCurrentRow(whToStMatrixRow);
            }
        
//            ViewObject stMatrixVo = this.getStorePriorityMatrixVO();
//            stMatrixVo.setWhereClause(null);
//            stMatrixVo.setWhereClause(Constants.RESET_WHERE_VALUE);
//            stMatrixVo.executeQuery();
//            stMatrixVo.executeEmptyRowSet();
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in initCreateListActivity" + e);
        }
    }
    
    /**
     * Invoked on the reset button click
     * @param null
     */

    public void onClickResetAction() {
        try {
           
            this.getDBTransaction().rollback();
            getDBTransaction().clearEntityCache(null);
            ViewObject whToStPriorityMatrixProgVO = this.getWhToStPriorityMatrixProgVO();

            if (whToStPriorityMatrixProgVO != null) {
                whToStPriorityMatrixProgVO.executeEmptyRowSet();
            }
            initWhToStMatrix();
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in onClickResetAction" + e);
        }
    }
    
    
    /**
     * Invoked on the save button click
     * @param Code values
     */
    
    public String saveMatrixValidation(){
        String errMsg = null;
        try{
                ViewObject stMatrixVo = this.getStorePriorityMatrixVO();
                StringBuilder storeCodeValues = new StringBuilder();
                Row[] warehouse1Arr = null;
                if(stMatrixVo != null){
                   warehouse1Arr = stMatrixVo.getFilteredRows(Constants.STOCKING_POINT_ID1_ATTR, null);
                }
                if(warehouse1Arr.length > 0){
                    for(Row currRow : warehouse1Arr){
                        if(currRow != null){
                            storeCodeValues.append(currRow.getAttribute(Constants.STORE_CODE_ATTR));
                            storeCodeValues.append(Constants.COMMA);
                        }
                    }
                    String storeCodes = storeCodeValues.toString();
                    errMsg = storeCodes.substring(0, storeCodes.length()-1);
                    errMsg = errMsg + Constants.PRIMARY_WH_ERR;
                }
            
            if(errMsg == null){
                if(stMatrixVo != null){
                Row[] allWHRowArr = stMatrixVo.getAllRowsInRange();
                for(Row curRow : allWHRowArr){
                    if(curRow != null){
                        boolean isValid = true;
                        if(curRow.getAttribute(Constants.STOCKING_POINT_ID1_ATTR) != null){
                            if(curRow.getAttribute(Constants.STOCKING_POINT_ID1_ATTR).equals(curRow.getAttribute(Constants.STOCKING_POINT_ID2_ATTR))){
                                storeCodeValues.append(curRow.getAttribute(Constants.STORE_CODE_ATTR));
                                storeCodeValues.append(Constants.COMMA);
                                isValid = false;
                            }else if (curRow.getAttribute(Constants.STOCKING_POINT_ID1_ATTR).equals(curRow.getAttribute(Constants.STOCKING_POINT_ID3_ATTR))){
                                storeCodeValues.append(curRow.getAttribute(Constants.STORE_CODE_ATTR));
                                storeCodeValues.append(Constants.COMMA);
                                isValid = false;
                            }
                        }
                        if(curRow.getAttribute(Constants.STOCKING_POINT_ID2_ATTR) != null && curRow.getAttribute(Constants.STOCKING_POINT_ID3_ATTR) != null){
                            if(curRow.getAttribute(Constants.STOCKING_POINT_ID2_ATTR).equals(curRow.getAttribute(Constants.STOCKING_POINT_ID3_ATTR)) && isValid){
                                        storeCodeValues.append(curRow.getAttribute(Constants.STORE_CODE_ATTR));
                                        storeCodeValues.append(Constants.COMMA);
                            }
                        }
                    }
                }
                if(storeCodeValues.length() > 0){
                    String storeCodes = storeCodeValues.toString();
                    errMsg = storeCodes.substring(0, storeCodes.length()-1);
                    errMsg = errMsg + Constants.SPACE + Constants.INVALID_COMBINATION_MATRIX;
                }
            } 
            }
            
            } catch (Exception e) {
                e.printStackTrace();
                logger.info("Exception in saveMatrixValidation" + e);
            }
        return errMsg;
    }
    
    /**
     * Invoked on the save button click
     * @param Code values
     */

    public Map saveMatrix(){
        Integer plSqlCallStatus = FAIL;
        Map outMap = new HashMap();
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus.intValue());
        try {
            DBTransaction dbTransacion = this.getDBTransaction();
            dbTransacion.postChanges();
            
            StorePriorityMatrixVOImpl stMatrixVo = this.getStorePriorityMatrixVO();
            StorePriorityMatrixVORowImpl curRowImpl = (StorePriorityMatrixVORowImpl)stMatrixVo.first();
            if(curRowImpl != null){
            oracle.jbo.domain.Number transactionId = curRowImpl.getTransactionId();
            SQLParam transactionIdParam = new SQLParam(transactionId, ParamType.IN, Types.NUMERIC);
            SQLParam outErrorParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);

            SQLParam timeStamp = new SQLParam(null, ParamType.OUT, Types.NUMERIC);
            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransacion, ST_MATRIX_SAVE_FUNCTION,
                                                         Types.INTEGER, transactionIdParam, timeStamp, outErrorParam);
            dbTransacion.commit();

            getStorePriorityMatrixVO().executeQuery();
            logger.info("plSqlCallStatus:" + plSqlCallStatus.intValue());
            if (outErrorParam != null && outErrorParam.getValue() != null) {
                outMap.put(Constants.SEARCH_ERROR_MESSAGE, outErrorParam.getValue().toString());
                logger.info("outParam.getValue()===:" + outErrorParam.getValue());
            }
            logger.info("Save function executed successfully.");
        }
        } catch (Exception e) {
            logger.info(e.getMessage());
            outMap.put(Constants.SEARCH_ERROR_MESSAGE, e.getMessage());
            e.printStackTrace();
        }
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus.intValue());
        return outMap;
    }
    
    /**
     * Invoked on the search button click
     * @param Code values
     */

    public Map searchMatrix(String selectedStoreCodes){
        Map outMap = new HashMap();
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, FAIL);
        DtWhToStPrMatSearchRec[] whToStSearchRecObj = new DtWhToStPrMatSearchRec[1];
        DtWhToStPrMatSearchRec matrixSearchRec = new DtWhToStPrMatSearchRec();
        DBTransaction dbTransacion = this.getDBTransaction();
        DtWhToStPrMatSearchTbl dtWhToStPrMatSearchTbl = null;
        try{
            matrixSearchRec.setStoreId(selectedStoreCodes);
            matrixSearchRec.setCreateUser(AipdtModelUtil.getUserName());
            whToStSearchRecObj[0] = matrixSearchRec;
           
            dtWhToStPrMatSearchTbl = new DtWhToStPrMatSearchTbl();
            dtWhToStPrMatSearchTbl.setArray(whToStSearchRecObj);
            SQLParam outErrorParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);
            SQLParam tblArrParam =
                new SQLParam(dtWhToStPrMatSearchTbl, ParamType.IN, Types.ARRAY, DtWhToStPrMatSearchTbl._SQL_NAME,
                             DtWhToStPrMatSearchTbl.getORADataFactory());
            
            Integer plSqlCallStatus = null;

            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransacion, ST_MATRIX_PLSQL_SEARCH_FUNCTION,
                                                         Types.INTEGER, tblArrParam, outErrorParam);

                getStorePriorityMatrixVO().executeQuery();
                logger.info("plSqlCallStatus:" + plSqlCallStatus.intValue());
                if (outErrorParam != null && outErrorParam.getValue() != null) {
                    outMap.put(Constants.SEARCH_ERROR_MESSAGE, outErrorParam.getValue().toString());
                    logger.info("outParam.getValue()===:" + outErrorParam.getValue());
                }
                logger.info("Search function executed successfully.");
                outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus.intValue());
            } catch (Exception e) {
                logger.info(e.getMessage());
                outMap.put(Constants.SEARCH_ERROR_MESSAGE, e.getMessage());
                e.printStackTrace();
            }
            
            return outMap;
    }
    
    /**
     * Invoked on the value chnage of the warehouse 1 or 2 or 3
     * @param null
     */
    
    public String warehouseValidationrowLevel(){
        String errMsg = null;
        StorePriorityMatrixVOImpl stMatrixVo = this.getStorePriorityMatrixVO();
        if(stMatrixVo != null){
            StorePriorityMatrixVORowImpl curRow = (StorePriorityMatrixVORowImpl)stMatrixVo.getCurrentRow();
            if(curRow != null){
                curRow.setUpdateInd(Constants.UPDATE_IND_1);
                boolean isValid = true;
                if(curRow.getStockingPointId1() != null){
                    if(curRow.getStockingPointId1().equals(curRow.getStockingPointId2())){
                        errMsg = AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.WH1_COMPARE_WH2_ERR);
                        isValid = false;
                    }else if (curRow.getStockingPointId1().equals(curRow.getStockingPointId3())){
                        errMsg = AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.WH1_COMPARE_WH3_ERR);
                        isValid = false;
                    }
                }
                
                if(curRow.getStockingPointId2() != null && curRow.getStockingPointId3() != null){
                    if(curRow.getStockingPointId2().equals(curRow.getStockingPointId3()) && isValid){
                        errMsg = AipdtModelUtil.getXlifLocalizedString(Constants.AIPDT_MODEL_BUNDLE,
                                                                       Constants.WH2_COMPARE_WH3_ERR);
                    }
                }
            }
        }
        return errMsg;
    }
}

