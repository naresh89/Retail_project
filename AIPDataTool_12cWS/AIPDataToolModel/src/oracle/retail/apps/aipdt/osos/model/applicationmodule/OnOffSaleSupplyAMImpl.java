package oracle.retail.apps.aipdt.osos.model.applicationmodule;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;

import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewObjectImpl;
import oracle.retail.apps.aipdt.common.model.view.CommodityVOImpl;
import oracle.retail.apps.aipdt.common.model.view.ItemListVOImpl;
import oracle.retail.apps.aipdt.common.model.view.ClassVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreFormatVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreListVOImpl;
import oracle.retail.apps.aipdt.common.model.view.StoreVOImpl;
import oracle.retail.apps.aipdt.common.model.view.SubClassVOImpl;
import oracle.retail.apps.aipdt.common.model.view.SupplierListVOImpl;
import oracle.retail.apps.aipdt.common.model.view.SupplierVOImpl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtOossSearchRec;
import oracle.retail.apps.aipdt.common.jdbc.type.DtOossSearchTbl;
import oracle.retail.apps.aipdt.osos.model.applicationmodule.common.OnOffSaleSupplyAM;
import oracle.retail.apps.aipdt.osos.model.view.OnOffSaleSupplyResultVOImpl;
import oracle.retail.apps.framework.jdbc.util.SQLParam;
import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.osos.model.view.OnOffSaleSupplyResultVORowImpl;
import oracle.retail.apps.aipdt.osos.model.view.OnOffSaleSupplySearchFieldsVORowImpl;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 29 12:41:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OnOffSaleSupplyAMImpl extends AipdtApplicationModuleImpl implements OnOffSaleSupplyAM {

    private static ADFLogger logger = ADFLogger.createADFLogger(OnOffSaleSupplyAMImpl.class);
    private static String OSOS_REGION_PARAM = "regId";
    private static String OSOS_DEPT_PARAM = "DEPARTMENT_ID";
    private static int SUCCESS = 0;
    private static int FAIL = 1;

    /**
     * This function executes while loading screen.
     */
    public void initOnOffSaleSupply() {
        //Reset result table
        AipdtViewObjectImpl resultVO = getOnOffSaleSupplyResultVO();
        resultVO.executeEmptyRowSet();

        //Reset search Params
        AipdtViewObjectImpl searchVO = getOnOffSaleSupplySearchFieldsVO1();
        if (searchVO != null && searchVO.getCurrentRow() != null) {
            searchVO.removeCurrentRow();
        }
        searchVO.executeEmptyRowSet();
        Row row = searchVO.createRow();
        searchVO.insertRow(row);
        searchVO.setCurrentRow(row);
    }

    public void clearCache() {
        if (this.getTransaction().isDirty()) {
            this.getTransaction().rollback();
            this.getDBTransaction().clearEntityCache(null);
        }
    }


    /**
     * Rollbacks the transaction and initializes the taskflow on click of Reset button.
     */
    public void handleReset() {
        clearCache();
        initOnOffSaleSupply();
    }

    /**
     * Search OnOffSaleSupply data.
     * Map - contains search params selected by user
     * errorMessage - will be displayed on error
     */
    public Map handleSearch(Map searchParamMap) {
        Map outMap = new HashMap();
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, FAIL);
        //Prepare screen input data for search - Set the screen data to database objetc
        DtOossSearchRec[] oossSearchRecObj = new DtOossSearchRec[10];
        DtOossSearchRec oossSearchRec = new DtOossSearchRec();
        DBTransaction dbTransacion = this.getDBTransaction();
        DtOossSearchTbl oossSearchTbl = null;
        String all_stores_flag = "Y";
        try {
            if (searchParamMap.get(Constants.DEPT) != null) {
                oossSearchRec.setDept(new BigDecimal(searchParamMap.get(Constants.DEPT).toString()));
            }
            if (searchParamMap.get(Constants.CLASS) != null) {
                oossSearchRec.setClassAttribute(searchParamMap.get(Constants.CLASS).toString());
            }
            if (searchParamMap.get(Constants.SUBCLASS) != null) {
                oossSearchRec.setSubclass(searchParamMap.get(Constants.SUBCLASS).toString());
            }
            if (searchParamMap.get(Constants.VPN) != null) {
                oossSearchRec.setVpn(searchParamMap.get(Constants.VPN).toString());
            }
            if (searchParamMap.get(Constants.VPN_COLOR) != null) {
                oossSearchRec.setVpnColor(searchParamMap.get(Constants.VPN_COLOR).toString());
            }
            if (searchParamMap.get(Constants.ITEM) != null) {
                oossSearchRec.setSku(searchParamMap.get(Constants.ITEM).toString());
            }
            if (searchParamMap.get(Constants.ITEM_LIST) != null) {
                oossSearchRec.setItemList(searchParamMap.get(Constants.ITEM_LIST).toString());
            }
            if (searchParamMap.get(Constants.REGION) != null) {
                oossSearchRec.setRegion(new BigDecimal(searchParamMap.get(Constants.REGION).toString()));
            }
            if (searchParamMap.get(Constants.STORE) != null) {
                oossSearchRec.setStore(searchParamMap.get(Constants.STORE).toString());
                all_stores_flag = "N";
            }
            if (searchParamMap.get(Constants.STORE_LIST) != null) {
                oossSearchRec.setStoreList(searchParamMap.get(Constants.STORE_LIST).toString());
                all_stores_flag = "N";
            }
            if (searchParamMap.get(Constants.SUPPLIER) != null) {
                oossSearchRec.setSupplier(searchParamMap.get(Constants.SUPPLIER).toString());
            }
            oossSearchRec.setAllStores(all_stores_flag);

            oossSearchRec.setCreateUser(AipdtModelUtil.getUserName());
            oossSearchRecObj[0] = oossSearchRec;
        } catch (Exception e) {
            logger.info(e.getMessage());
            outMap.put(Constants.SEARCH_ERROR_MESSAGE, e.getMessage());
            return outMap;
        }

        oossSearchTbl = new DtOossSearchTbl(oossSearchRecObj);

        SQLParam outErrorParam = new SQLParam(null, ParamType.INOUT, Types.VARCHAR);
        SQLParam tblArrParam =
            new SQLParam(oossSearchTbl, ParamType.INOUT, Types.ARRAY, DtOossSearchTbl._SQL_NAME,
                         DtOossSearchTbl.getORADataFactory());
        Integer plSqlCallStatus = null;

        plSqlCallStatus =
            (Integer) AppsDBUtils.callStoredFunction(dbTransacion, Constants.PLSQL_SEARCH_ON_OFF_SALE_SUPPLY,
                                                     Types.INTEGER, outErrorParam, tblArrParam);

        try {
            getOnOffSaleSupplyResultVO().executeQuery();
            logger.info("plSqlCallStatus:" + plSqlCallStatus.intValue());
            if (outErrorParam != null && outErrorParam.getValue() != null) {
                outMap.put(Constants.SEARCH_ERROR_MESSAGE, outErrorParam.getValue().toString());
                logger.info("outParam.getValue()===:" + outErrorParam.getValue());
            }
            logger.info("Search function executed successfully.");
        } catch (Exception e) {
            logger.info(e.getMessage());
            outMap.put(Constants.SEARCH_ERROR_MESSAGE, e.getMessage());
            e.printStackTrace();
        }
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus.intValue());
        return outMap;
    }

    /**
     * Save OnOffSaleSupply data.
     * ErrorMessage will be displayed on error
     */
    public Map handleSave() {
        Integer plSqlCallStatus = FAIL;
        Map outMap = new HashMap();
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus.intValue());
        try {
            DBTransaction dbTransacion = this.getDBTransaction();
            dbTransacion.postChanges();
            SQLParam outErrorParam = new SQLParam(null, ParamType.INOUT, Types.VARCHAR);

            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransacion, Constants.PLSQL_SAVE_ON_OFF_SALE_SUPPLY,
                                                         Types.INTEGER, outErrorParam);
            dbTransacion.commit();

            getOnOffSaleSupplyResultVO().executeQuery();
            logger.info("plSqlCallStatus:" + plSqlCallStatus.intValue());
            if (outErrorParam != null && outErrorParam.getValue() != null) {
                outMap.put(Constants.SEARCH_ERROR_MESSAGE, outErrorParam.getValue().toString());
                logger.info("outParam.getValue()===:" + outErrorParam.getValue());
            }
            logger.info("Save function executed successfully.");
        } catch (Exception e) {
            logger.info(e.getMessage());
            outMap.put(Constants.SEARCH_ERROR_MESSAGE, e.getMessage());
            e.printStackTrace();
        }
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus.intValue());
        return outMap;
    }

    /**
     * Handle SetAll functionality for checkbox,OnSaleDate and OffSaleDate fields.
     */
    public int handleSetAllRules(Map setAllMap) {
        Integer plSqlCallStatus = SUCCESS;
        try {
            logger.info("****** Inside handleSetAllRules method ******");
            java.sql.Date onSaleDate = null;
            java.sql.Date offSaleDate = null;

            if (setAllMap.get(Constants.ON_SALE_DATE) != null && setAllMap.get(Constants.SET_ALL_FLAG) == 0) {
                onSaleDate = new java.sql.Date(((java.util.Date) setAllMap.get(Constants.ON_SALE_DATE)).getTime());
            }
            if (setAllMap.get(Constants.OFF_SALE_DATE) != null && setAllMap.get(Constants.SET_ALL_FLAG) == 1) {
                offSaleDate = new java.sql.Date(((java.util.Date) setAllMap.get(Constants.OFF_SALE_DATE)).getTime());
            }

            OnOffSaleSupplyResultVOImpl ososResultsVO = getOnOffSaleSupplyResultVO();
            RowSetIterator resultsRowset = ososResultsVO.createRowSetIterator(null);
            OnOffSaleSupplyResultVORowImpl resultsRow;
            resultsRowset.reset();
            //Handle OnSaleDate
            if (setAllMap.get(Constants.SET_ALL_FLAG) == 0) {
                while (resultsRowset.hasNext()) {
                    resultsRow = (OnOffSaleSupplyResultVORowImpl) resultsRowset.next();
                    if (resultsRow.getFlag() == 1)
                        resultsRow.setOnSaleDate(onSaleDate);
                }
            }
            ////Handle OffSaleDate
            if (setAllMap.get(Constants.SET_ALL_FLAG) == 1) {
                while (resultsRowset.hasNext()) {
                    resultsRow = (OnOffSaleSupplyResultVORowImpl) resultsRowset.next();
                    if (resultsRow.getFlag() == 1)
                        resultsRow.setOffSaleDate(offSaleDate);
                }
            }

            resultsRowset.closeRowSetIterator();
            logger.info("SetAllRules function executed successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(e.getMessage());
        }
        return plSqlCallStatus.intValue();
    }

    /**
     * Selects / Deselects all the records based on the 'All' check box selection on the table column header
     * in OnOffSaleSupply Results section.
     * @param isSelected - true/false
     * @return
     */
    public long handleCheckBoxAll(boolean isSelected) {
        logger.info("****** Inside handleCheckBoxAll method ******");
        OnOffSaleSupplyResultVOImpl ososResultsVO = getOnOffSaleSupplyResultVO();
        try {
            RowSetIterator resultsRowset = ososResultsVO.createRowSetIterator(null);
            resultsRowset.reset();
            OnOffSaleSupplyResultVORowImpl resultsRow;
            while (resultsRowset.hasNext()) {
                resultsRow = (OnOffSaleSupplyResultVORowImpl) resultsRowset.next();
                resultsRow.setFlag(isSelected ? 1 : 0);
            }
            resultsRowset.closeRowSetIterator();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        logger.info("****** handleCheckBoxAll method - completed ******");
        return ososResultsVO.getEstimatedRowCount();
    }

    /**
     * This method resets Store and supplier values.
     */

    public void resetViewObject() {
        try {
            ViewObject vo = getOnOffSaleSupplySearchFieldsVO1();
            OnOffSaleSupplySearchFieldsVORowImpl roImpl = (OnOffSaleSupplySearchFieldsVORowImpl) vo.getCurrentRow();
            ViewObject supplierVO = roImpl.getDeptOrdFromSuppVO1().getViewObject();
            ViewObject storeVO = roImpl.getStoreRegionVO1().getViewObject();

            if (supplierVO != null) {
                supplierVO.setWhereClause(null);
                supplierVO.executeQuery();
            }
            if (storeVO != null) {
                storeVO.applyViewCriteria(null);
                storeVO.executeQuery();
            }

        } catch (Exception e) {
            e.printStackTrace();
            logger.severe(e);
        }
    }

    /**
     * This method filters Store ViewObject based on given RegionId.
     * @param region id
     */

    public void filterStoreVO(String regId) {
        try {
            ViewObject vo = getOnOffSaleSupplySearchFieldsVO1();
            if (vo != null) {
                OnOffSaleSupplySearchFieldsVORowImpl roImpl = (OnOffSaleSupplySearchFieldsVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject storeVO = roImpl.getStoreRegionVO1().getViewObject();
                    if (storeVO != null && regId != null) {
                        ViewCriteria storeVC =
                            storeVO.getViewCriteriaManager().getViewCriteria(getStoreRegionViewCreteria());
                        VariableValueManager vm = storeVO.ensureVariableManager();
                        vm.setVariableValue(OSOS_REGION_PARAM, Integer.valueOf(regId));
                        storeVC.setVariableManager(vm);
                        storeVO.applyViewCriteria(storeVC);
                        storeVO.executeQuery();
                    } else {
                        storeVO.applyViewCriteria(null);
                        storeVO.executeQuery();
                    }
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method filters Supplier based on department selected in screen.
     * @param department id
     */

    public void filterSupplierLOVVO(String deptId) {
        try {
            ViewObject vo = getOnOffSaleSupplySearchFieldsVO1();
            StringBuffer sbWhereClause = new StringBuffer();
            if (vo != null) {
                OnOffSaleSupplySearchFieldsVORowImpl roImpl = (OnOffSaleSupplySearchFieldsVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject storeVO = roImpl.getDeptOrdFromSuppVO1().getViewObject();
                    if (storeVO != null) {
                        if (deptId != null && !deptId.isEmpty()) {
                            //String whereClause = "DEPARTMENT_ID IN(" + Integer.valueOf(deptId) + ")";
                            sbWhereClause.append(OSOS_DEPT_PARAM);
                            sbWhereClause.append(" IN( ");
                            sbWhereClause.append(Integer.valueOf(deptId));
                            sbWhereClause.append(" ) ");
                            storeVO.setWhereClause(sbWhereClause.toString());
                            storeVO.executeQuery();
                        } else {
                            storeVO.setWhereClause(null);
                            storeVO.executeQuery();
                        }
                    }
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    /**
     * This is the default constructor (do not remove).
     */
    public OnOffSaleSupplyAMImpl() {
    }

    /**
     * Container's getter for OnOffSaleSupplySearchFieldsVO1.
     * @return OnOffSaleSupplySearchFieldsVO1
     */
    private String getStoreRegionViewCreteria() {
        return "StoreRegionVOCriteria";
    }


    /**
     * Container's getter for OnOffSaleSupplySearchFieldsVO1.
     * @return OnOffSaleSupplySearchFieldsVO1
     */
    public AipdtViewObjectImpl getOnOffSaleSupplySearchFieldsVO1() {
        return (AipdtViewObjectImpl) findViewObject("OnOffSaleSupplySearchFieldsVO1");
    }


    /**
     * Container's getter for DepartmentsVO2.
     * @return DepartmentsVO2
     */
    public AipdtViewObjectImpl getDepartmentsVO2() {
        return (AipdtViewObjectImpl) findViewObject("DepartmentsVO2");
    }

    /**
     * Container's getter for DtSubclassVO2.
     * @return DtSubclassVO2
     */
    public AipdtViewObjectImpl getDtSubclassVO2() {
        return (AipdtViewObjectImpl) findViewObject("DtSubclassVO2");
    }

    /**
     * Container's getter for DeploymentTypeVO1.
     * @return DeploymentTypeVO1
     */
    public AipdtViewObjectImpl getDeploymentTypeVO1() {
        return (AipdtViewObjectImpl) findViewObject("DeploymentTypeVO1");
    }

    /**
     * Container's getter for DptDetFkLink1.
     * @return DptDetFkLink1
     */
    public ViewLinkImpl getDptDetFkLink1() {
        return (ViewLinkImpl) findViewLink("DptDetFkLink1");
    }

    /**
     * Container's getter for FkDtSubclassLink1.
     * @return FkDtSubclassLink1
     */
    public ViewLinkImpl getFkDtSubclassLink1() {
        return (ViewLinkImpl) findViewLink("FkDtSubclassLink1");
    }


    /**
     * Container's getter for DepartmentVO1.
     * @return DepartmentVO1
     */
    public AipdtViewObjectImpl getDepartmentVO1() {
        return (AipdtViewObjectImpl) findViewObject("DepartmentVO1");
    }

    /**
     * Container's getter for ClassVO1.
     * @return ClassVO1
     */
    public ClassVOImpl getClassVO1() {
        return (ClassVOImpl) findViewObject("ClassVO1");
    }

    /**
     * Container's getter for SupplierVO1.
     * @return SupplierVO1
     */
    public SupplierVOImpl getSupplierVO1() {
        return (SupplierVOImpl) findViewObject("SupplierVO1");
    }

    /**
     * Container's getter for SupplierListVO1.
     * @return SupplierListVO1
     */
    public SupplierListVOImpl getSupplierListVO1() {
        return (SupplierListVOImpl) findViewObject("SupplierListVO1");
    }

    /**
     * Container's getter for SubClassVO1.
     * @return SubClassVO1
     */
    public SubClassVOImpl getSubClassVO1() {
        return (SubClassVOImpl) findViewObject("SubClassVO1");
    }

    /**
     * Container's getter for StoreVO1.
     * @return StoreVO1
     */
    public StoreVOImpl getStoreVO1() {
        return (StoreVOImpl) findViewObject("StoreVO1");
    }

    /**
     * Container's getter for StoreFormatVO1.
     * @return StoreFormatVO1
     */
    public StoreFormatVOImpl getStoreFormatVO1() {
        return (StoreFormatVOImpl) findViewObject("StoreFormatVO1");
    }

    /**
     * Container's getter for StoreListVO1.
     * @return StoreListVO1
     */
    public StoreListVOImpl getStoreListVO1() {
        return (StoreListVOImpl) findViewObject("StoreListVO1");
    }

    /**
     * Container's getter for CommodityVO1.
     * @return CommodityVO1
     */
    public CommodityVOImpl getCommodityVO1() {
        return (CommodityVOImpl) findViewObject("CommodityVO1");
    }

    /**
     * Container's getter for ItemListVO1.
     * @return ItemListVO1
     */
    public ItemListVOImpl getItemListVO1() {
        return (ItemListVOImpl) findViewObject("ItemListVO1");
    }

    /**
     * Container's getter for OnOffSaleSupplyResultVO1.
     * @return OnOffSaleSupplyResultVO1
     */
    public OnOffSaleSupplyResultVOImpl getOnOffSaleSupplyResultVO() {
        return (OnOffSaleSupplyResultVOImpl) findViewObject("OnOffSaleSupplyResultVO");
    }


    /**
     * Container's getter for OnOffSaleSupplyItemHierPopupVO1.
     * @return OnOffSaleSupplyItemHierPopupVO1
     */
    public AipdtViewObjectImpl getOnOffSaleSupplyItemHierPopupVO1() {
        return (AipdtViewObjectImpl) findViewObject("OnOffSaleSupplyItemHierPopupVO1");
    }

    /**
     * Container's getter for OnOffSaleSupplyStorePopupVO1.
     * @return OnOffSaleSupplyStorePopupVO1
     */
    public AipdtViewObjectImpl getOnOffSaleSupplyStorePopupVO1() {
        return (AipdtViewObjectImpl) findViewObject("OnOffSaleSupplyStorePopupVO1");
    }
}
