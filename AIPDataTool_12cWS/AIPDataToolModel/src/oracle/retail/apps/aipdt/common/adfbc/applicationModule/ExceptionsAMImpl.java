package oracle.retail.apps.aipdt.common.adfbc.applicationModule;

import java.sql.SQLException;

import java.util.Locale;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ValidationException;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.adfbc.applicationModule.common.ExceptionsAM;
import oracle.retail.apps.aipdt.common.validation.ErrorType;
import oracle.retail.apps.framework.bc.model.ext.RetailApplicationModuleImpl;

import org.apache.commons.lang.StringUtils;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 16 17:51:08 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExceptionsAMImpl extends RetailApplicationModuleImpl implements ExceptionsAM {
    private static final ADFLogger _logger = ADFLogger.createADFLogger(ExceptionsAMImpl.class);
    private static final String UNKNOWN_ERROR_KEY = "Error code not found. Please contact System Administrator";
    private static final String NULL_ERROR_KEY = "Error code is blank. Please contact System Administrator";

    /**
     * This is the default constructor (do not remove).
     */
    public ExceptionsAMImpl() {
    }

   

    public boolean isValidLocale(String value) {
        Locale[] locales = Locale.getAvailableLocales();
        for (Locale l : locales) {
            if (l.getLanguage().equals(value)) {
                return true;
            }
        }
        return false;
    }

    public ValidationException getValidationException(String type, String key, String[] params, Locale locale) {
        if (StringUtils.isEmpty(type))
            return new ValidationException("");
        ErrorType et = ErrorType.valueOf(type);
        return getValidationException(et, key, params, locale);
        
    }

    public ValidationException getValidationException(ErrorType type, String key, String[] params, Locale locale) {
        ValidationException ve = null;
        switch (type) {      
        case COMMON:
            ve = new ValidationException(getRootApplicationModule().getResourceBundleDef(), key, params);
            break;
        default:
            ve = new ValidationException("");
        }
        ve.setAppendCodes(false);
        return ve;
    }
    
    /*
     * converts an exception into validation exception
     */
    public void raiseValidationException(Exception e, Locale locale) {
        _logger.severe("An exception has occurred", e);
        ValidationException ve = null;
        //Handle known exceptions here
        if ( e instanceof SQLException) {
            SQLException se = (SQLException)e;
            ve = getValidationException(ErrorType.COMMON, 
                                     Constants.SQL_EXCEPTION_RECEIVED_KEY, 
                                     new String[] {se.getLocalizedMessage()}, 
                                     locale);
        }
        else {
            ve = getValidationException(ErrorType.COMMON, 
                                     Constants.DEFAULT_ERROR_AND_DESC_MSG_KEY, 
                                     new String[] {e.getLocalizedMessage()},
                                     locale);

        }
        ve.setExceptions(new Throwable[] {e});
        throw ve;
    }
    
    public void raiseValidationException(ErrorType type, String key, String[] params, Locale locale) {
        StringBuilder sb = new StringBuilder();
        sb.append("Raising a validation exception of type = ").append(type.name()).append(" and key = ").append(key);
        _logger.warning(sb.toString());
        throw getValidationException(type, key, params, locale);
    }

    //TODO create another flavor that takes an exception object 
    //and interprets different exceptions differently
    //TODO remove locale as method parameter
    public void raiseValidationException(String type, String key, String[] params, Locale locale) {
        throw getValidationException(type, key, params, locale);
    }

    
}
