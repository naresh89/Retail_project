package oracle.retail.apps.aipdt.dt.model.appModule;

import java.math.BigDecimal;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;

import oracle.jbo.server.DBTransaction;

import oracle.retail.apps.aipdt.common.Constants;
import oracle.retail.apps.aipdt.common.DtListDetail;
import oracle.retail.apps.aipdt.common.adfbc.AipdtApplicationModuleImpl;
import oracle.retail.apps.aipdt.common.adfbc.AipdtViewObjectImpl;
import oracle.retail.apps.aipdt.common.model.util.AipdtModelUtil;
import oracle.retail.apps.aipdt.dt.model.appModule.common.DeploymentTypeAM;
import oracle.retail.apps.aipdt.dt.model.view.DeploymentTypeResultVOImpl;
import oracle.retail.apps.aipdt.dt.model.view.DeploymentTypeResultVORowImpl;
import oracle.retail.apps.aipdt.dt.model.view.DeploymentTypeSearchRVOImpl;
import oracle.retail.apps.aipdt.dt.model.view.DeploymentTypeSearchRVORowImpl;
import oracle.retail.apps.aipdt.common.jdbc.type.DtDepTypeSearchRec;
import oracle.retail.apps.aipdt.common.jdbc.type.DtDepTypeSearchTbl;
import oracle.retail.apps.aipdt.osos.model.view.OnOffSaleSupplyResultVOImpl;
import oracle.retail.apps.aipdt.osos.model.view.OnOffSaleSupplyResultVORowImpl;
import oracle.retail.apps.aipdt.root.model.applicationmodule.AipdtRootAMImpl;
import oracle.retail.apps.framework.jdbc.util.AppsDBUtils;
import oracle.retail.apps.framework.jdbc.util.ParamType;
import oracle.retail.apps.framework.jdbc.util.SQLParam;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 07 19:41:14 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeploymentTypeAMImpl extends AipdtApplicationModuleImpl implements DeploymentTypeAM {

    ADFLogger logger = ADFLogger.createADFLogger(DeploymentTypeAMImpl.class);
    private final static String PLSQL_POPULATE_DT_DEPLOYMENT_TYPE = "DT_DATA_EXECUTION.LOAD_DEPT_DEPLOYMENT_TYPE";
    private final static String PLSQL_POPULATE_DT_DEPLOYMENT_SUPPLIER_TYPE =
        "DT_DATA_EXECUTION.LOAD_DEPT_SUPP_DEPLOYMENT_TYPE";
    private final static String PLSQL_POPULATE_DT_DEPLOYMENT_ITEM_TYPE = "DT_DATA_EXECUTION.LOAD_ITEM_DEPLOYMENT_TYPE";
    private final static String PLSQL_SEARCH_FUNCTION = "DT_ITEM_DEPL_TYPE_SQL.SEARCH_DEPLOYMENT_TYPE";
    private final static String PLSQL_SAVE_FUNCTION = "DT_ITEM_DEPL_TYPE_SQL.DT_DEPL_TYPE_SAVE";

    /**
     * This is the default constructor (do not remove).
     */
    public DeploymentTypeAMImpl() {
    }

    /**
     * Container's getter for DeploymentTypeSearchRVO1.
     * @return DeploymentTypeSearchRVO1
     */
    public DeploymentTypeSearchRVOImpl getDeploymentTypeSearchRVO1() {
        return (DeploymentTypeSearchRVOImpl) findViewObject("DeploymentTypeSearchRVO1");
    }


    public void executeLOVQuery(String userName) {
        String bindVarName = "bindLoggedUser";

        //DeploymentTypeSearchRVOImpl dpTypeVO = (DeploymentTypeSearchRVOImpl)getDeploymentTypeSearchRVO1();

        //DeploymentTypeSearchRVODefImpl voDef = (DeploymentTypeSearchRVODefImpl)dpTypeVO.getDef();


        //this.getDepartmentVO1().setNamedWhereClauseParam(bindVarName, userName);
        //this.getDepartmentVO1().executeQuery();


    }


    /**
     * This method  will be invoked on click of Search from DeploymentType Bean and returns rowCount after executing PLSQL package for the given input.
     * @param inputMap
     * @return
     */
    @SuppressWarnings("unchecked")

    public Map handleSearch(Map inputMap) {
        Map outputMap = null;
        Integer plSqlCallStatus = 0;
        int errorCode = 0;
        String errorMessage = null;
        logger.info("Entering handleSearch()");
        logger.info("input Map size : " + inputMap.size());
        Map outMap = new HashMap();
        try {
            DtDepTypeSearchRec[] recObjArray = new DtDepTypeSearchRec[5];
            DtDepTypeSearchRec recObj = new DtDepTypeSearchRec();
            if (inputMap.get(Constants.DEPT) != null)
                recObj.setDepartmentId(new BigDecimal(inputMap.get(Constants.DEPT).toString()));
            if (inputMap.get(Constants.CLASS) != null)
                recObj.setClassId(inputMap.get(Constants.CLASS).toString());
            if (inputMap.get(Constants.SUBCLASS) != null)
                recObj.setSubclassId(inputMap.get(Constants.SUBCLASS).toString());
            if (inputMap.get(Constants.VPN) != null)
                recObj.setStyleId(inputMap.get(Constants.VPN).toString());
            if (inputMap.get(Constants.VPN_COLOR) != null)
                recObj.setStyleColorId(inputMap.get(Constants.VPN_COLOR).toString());
            if (inputMap.get(Constants.ITEM) != null)
                recObj.setCommodityId(inputMap.get(Constants.ITEM).toString());
            if (inputMap.get(Constants.REGION) != null)
                recObj.setRegionId(new BigDecimal(inputMap.get(Constants.REGION).toString()));
            if (inputMap.get(Constants.STORE) != null)
                recObj.setStoreId(inputMap.get(Constants.STORE).toString());
            if (inputMap.get(Constants.SUPPLIER) != null)
                recObj.setSupplierId(new BigDecimal(inputMap.get(Constants.SUPPLIER).toString()));
            if (inputMap.get(Constants.SELECTION_LEVEL) != null)
                recObj.setSelectionLevel(new BigDecimal(inputMap.get(Constants.SELECTION_LEVEL).toString()));
            //if (inputMap.get(Constants.SELECTION_TYPE) != null)
            Object SelectionType = inputMap.get(Constants.SELECTION_TYPE);
            recObj.setSelectionType(SelectionType != null ? inputMap.get(Constants.SELECTION_TYPE).toString() : null);

            if (inputMap.get(Constants.IS_EXCEPTION) != null)
                recObj.setIsException(inputMap.get(Constants.IS_EXCEPTION).toString());

            recObj.setCreateUser(AipdtModelUtil.getUserName());
            recObjArray[0] = recObj;

            DtDepTypeSearchTbl tableObj = new DtDepTypeSearchTbl();
            tableObj.setArray(recObjArray);


            DBTransaction dbTransacion = this.getDBTransaction();
            SQLParam outErrorParam = new SQLParam(null, ParamType.INOUT, Types.VARCHAR);
            SQLParam tblArrParam =
                new SQLParam(tableObj, ParamType.IN, Types.ARRAY, DtDepTypeSearchTbl._SQL_NAME,
                             DtDepTypeSearchTbl.getORADataFactory());


            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransacion, PLSQL_SEARCH_FUNCTION, Types.INTEGER,
                                                         tblArrParam, outErrorParam);
            logger.info("plSqlCallStatus -->" + plSqlCallStatus);
            logger.info("outErrorParam -->" + outErrorParam.getValue());
            System.out.println("plSqlCallStatus -->" + plSqlCallStatus);
            System.out.println("outErrorParam -->" + outErrorParam.getValue());
            if (outErrorParam.getValue() == null && plSqlCallStatus == 0) {
                ViewObject voImpl = getDeploymentTypeResultVO();
                voImpl.setWhereClause(null);
                voImpl.executeQuery();
            } else {
                // If Procedure returns 1 and assigning error message to Method parameter.
                errorMessage = String.valueOf(outErrorParam.getValue());
            } //     ((DeploymentTypeResultVORowImpl)getDeploymentTypeResultVO().getCurrentRow()).getAttribute("StartDate").
            outMap.put(Constants.SEARCH_ERROR_CODE, null);
            outMap.put(Constants.SEARCH_ERROR_MESSAGE, errorMessage);
            outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus);
        } catch (java.sql.SQLException sqlExp) {
            sqlExp.printStackTrace();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return outMap;
    }


    private void populateDateToStagingTable(String type) {
        String DEPT_LEVEL = "DEPT";
        String SUPPLIER_LEVEL = "SUPPLIER";
        String ITEM_LEVEL = "ITEM";
        Integer plSqlCallStatus = null;

        SQLParam errorCodeParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);

        SQLParam timeStampParam = new SQLParam(null, ParamType.OUT, Types.NUMERIC);

        DBTransaction dbTransaction = this.getDBTransaction();

        if (type.equals(DEPT_LEVEL)) {

            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransaction, PLSQL_POPULATE_DT_DEPLOYMENT_TYPE,
                                                         Types.INTEGER, timeStampParam, errorCodeParam);
        } else if (type.equals(SUPPLIER_LEVEL)) {
            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransaction, PLSQL_POPULATE_DT_DEPLOYMENT_SUPPLIER_TYPE,
                                                         Types.INTEGER, timeStampParam, errorCodeParam);
        } else if (type.equals(ITEM_LEVEL)) {
            plSqlCallStatus =
                (Integer) AppsDBUtils.callStoredFunction(dbTransaction, PLSQL_POPULATE_DT_DEPLOYMENT_ITEM_TYPE,
                                                         Types.INTEGER, timeStampParam, errorCodeParam);
        }
    }

    /**
     * This method filters Store ViewObject based on given RegionId.
     * @param regId
     */

    public void filterStoreVO(String regId) {
        try {
            ViewObject vo = getDeploymentTypeSearchRVO1();
            if (vo != null) {
                DeploymentTypeSearchRVORowImpl roImpl = (DeploymentTypeSearchRVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject storeVO = roImpl.getStoreRegionVO1().getViewObject();
                    if (storeVO != null && regId != null) {
                        ViewCriteria storeVC =
                            storeVO.getViewCriteriaManager().getViewCriteria("StoreRegionVOCriteria");
                        VariableValueManager vm = storeVO.ensureVariableManager();
                        vm.setVariableValue("regId", Integer.valueOf(regId));
                        storeVC.setVariableManager(vm);
                        storeVO.applyViewCriteria(storeVC);
                        storeVO.executeQuery();
                        System.out.println("Store VO rowCount after filter based on RegionId value :" +
                                           storeVO.getEstimatedRowCount());
                    } else {
                        System.out.println("LOV ViewObject is empty");
                        storeVO.applyViewCriteria(null);
                        storeVO.executeQuery();
                    }
                } else {
                    System.out.println("rowImpl is null");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method filters SupplierLOV ViewObject based on given DepartmentId.
     * @param regId
     */

    public void filterSupplierLOVVO(String deptId) {
        try {
            ViewObject vo = getDeploymentTypeSearchRVO1();
            if (vo != null) {
                DeploymentTypeSearchRVORowImpl roImpl = (DeploymentTypeSearchRVORowImpl) vo.getCurrentRow();
                if (roImpl != null) {
                    ViewObject storeVO = roImpl.getDeptOrdFromSuppVO1().getViewObject();
                    if (storeVO != null) {
                        if (deptId != null && !deptId.isEmpty()) {
                            /*ViewCriteria storeVC = storeVO.getViewCriteriaManager().getViewCriteria("StoreVOCriteria");
                        VariableValueManager vm = vo.ensureVariableManager();
                        vm.setVariableValue("regId", Integer.valueOf(regId));
                        storeVC.setVariableManager(vm);
                        storeVO.applyViewCriteria(storeVC);*/
                            String whereClause = "DEPARTMENT_ID IN(" + Integer.valueOf(deptId) + ")";
                            storeVO.setWhereClause(whereClause);
                            storeVO.executeQuery();
                            System.out.println("Supplier VO rowCount after filter based on RegionId value :" +
                                               storeVO.getEstimatedRowCount());
                        } else {
                            storeVO.setWhereClause(null);
                            storeVO.executeQuery();
                        }
                    } else {
                        System.out.println("LOV ViewObject is empty");
                    }
                } else {
                    System.out.println("rowImpl is null");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method resets ViewObject.
     */

    public void resetViewObject() {
        try {
            DeploymentTypeResultVOImpl resultVOImpl = getDeploymentTypeResultVO();
            
            ViewObject vo = getDeploymentTypeSearchRVO1();
            DeploymentTypeSearchRVORowImpl roImpl = (DeploymentTypeSearchRVORowImpl) vo.getCurrentRow();
            ViewObject supplierVO = roImpl.getDeptOrdFromSuppVO1().getViewObject();
            ViewObject storeVO = roImpl.getStoreRegionVO1().getViewObject();

            if (supplierVO != null) {
                supplierVO.setWhereClause(null);
                supplierVO.applyViewCriteria(null);
                supplierVO.executeQuery();
            }
            if (storeVO != null) {
                storeVO.applyViewCriteria(null);
                storeVO.setWhereClause(null);
                storeVO.executeQuery();
            }
            if (getDBTransaction().isDirty()) {
                this.getDBTransaction().rollback();
                resultVOImpl.clearEntityObjectCache();
            }
            initActivity();
            
            if (resultVOImpl != null) {
                String whereClause = "1 = 2";
                resultVOImpl.setWhereClause(whereClause);
                resultVOImpl.executeQuery();
                resultVOImpl.clearCache();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for DeploymentTypeResultVO1.
     * @return DeploymentTypeResultVO1
     */
    public DeploymentTypeResultVOImpl getDeploymentTypeResultVO() {
        return (DeploymentTypeResultVOImpl) findViewObject("DeploymentTypeResultVO");
    }

    public void initActivity() {
        ViewObject resultVO = getDeploymentTypeResultVO();
        ViewObject searchVO = getDeploymentTypeSearchRVO1();
        if (resultVO != null) {
            resultVO.setWhereClause(null);
            resultVO.setWhereClause("1=2");
            resultVO.executeQuery();
        }
        if (searchVO != null) {
            if (searchVO.getCurrentRow() != null) {
                searchVO.removeCurrentRow();
            }
            searchVO.executeEmptyRowSet();
            Row row = searchVO.createRow();
            searchVO.insertRow(row);
            searchVO.setCurrentRow(row);
        }
    }

    public String getIdsFromDtListDetailTable(Integer itemList, String TYPE) {
        String itemVal = null;
        if (TYPE != null && TYPE.equals("ITEM_LIST")) {
            itemVal = AipdtModelUtil.fetchIdsFromDtListDetailTable(itemList, DtListDetail.COMMODITY_ID.toString());
        } else if (TYPE != null && TYPE.equals("STORE_LIST")) {
            itemVal = AipdtModelUtil.fetchIdsFromDtListDetailTable(itemList, DtListDetail.STORE_ID.toString());
        }
        return itemVal;
    }


    public String getSupplierIdFromCode(String supplierCode, String deptId) {
        ResultSet rs;
        String suppId = null;
        try {
            String query =
                "select supplier_id from V_DT_DEPT_ORD_FROM_SUPP where supplier_code = '" + supplierCode +
                "' and rownum=1";
            if (deptId != null) {
                query = query + " AND department_id = " + Integer.valueOf(deptId);
            }

            rs = this.getDBTransaction().createStatement(0).executeQuery(query);
            if (rs.next()) {
                suppId = String.valueOf(rs.getObject(1));
            }
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        }

        return suppId;
    }

    /**
     * Selects / Deselects all the records based on the 'All' check box selection on the table column header
     * in OnOffSaleSupply Results section.
     * @param isSelected
     * @return
     */
    public long handleCheckBoxAll(boolean isSelected) {
        logger.info("****** Inside handleCheckBoxAll method ******");
        RowSetIterator resultsRowset = null;
        DeploymentTypeResultVOImpl deplResultVO = null;
        try {
            deplResultVO = getDeploymentTypeResultVO();
            resultsRowset = deplResultVO.createRowSetIterator(null);
            resultsRowset.reset();
            //OnOffSaleSupplyResultVORowImpl resultsRow;
            while (resultsRowset.hasNext()) {
                DeploymentTypeResultVORowImpl resultsRow = (DeploymentTypeResultVORowImpl) resultsRowset.next();
                resultsRow.setUpdateInd(isSelected ? "1" : "0");
            }
            logger.info("****** handleCheckBoxAll method - completed ******");
        } catch (Exception e) {

        } finally {
            if (resultsRowset != null) {
                resultsRowset.closeRowSetIterator();
            }
        }
        return deplResultVO.getEstimatedRowCount();
    }


    @SuppressWarnings("unchecked")
    public Map handleSave() {
        Map outMap = new HashMap();
        String errorMessage = null;
        Integer plSqlCallStatus = 1;
        try {
            DBTransaction dbTransacion = this.getDBTransaction();
            dbTransacion.postChanges();
            //dbTransacion.commit(); // todo
            DeploymentTypeResultVORowImpl rowImpl =
                (DeploymentTypeResultVORowImpl) this.getDeploymentTypeResultVO().first();
            if (rowImpl != null) {

                BigDecimal transactionId = rowImpl.getTransactionId();
                SQLParam transactionIdParam = new SQLParam(transactionId, ParamType.IN, Types.NUMERIC);
                SQLParam outErrorParam = new SQLParam(null, ParamType.OUT, Types.VARCHAR);

                SQLParam timeStamp = new SQLParam(null, ParamType.OUT, Types.NUMERIC);

                plSqlCallStatus =
                    (Integer) AppsDBUtils.callStoredFunction(dbTransacion, PLSQL_SAVE_FUNCTION, Types.INTEGER,
                                                             transactionIdParam, timeStamp, outErrorParam);
                if (outErrorParam != null && outErrorParam.getValue() == null && plSqlCallStatus == 0) {
                    dbTransacion.commit();
                } else {
                    errorMessage = (String) outErrorParam.getValue();
                }
            } else {
                errorMessage = "An error has occured. Please contact your System Administrator.";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        outMap.put(Constants.SEARCH_ERROR_CODE, null);
        outMap.put(Constants.SEARCH_ERROR_MESSAGE, errorMessage);
        outMap.put(Constants.SEARCH_PLSQL_RETURN_STATUS, plSqlCallStatus);
        return outMap;
    }

    public int handleSetAll(Map setAllMap) {
        Integer plSqlCallStatus = 0;
        try {
            logger.info("****** Inside handleSetAllRules method ******");
            java.sql.Date startDate = null;
            java.sql.Date endDate = null;

            if (setAllMap.get(Constants.START_DATE) != null && setAllMap.get(Constants.SET_ALL_FLAG) == 0) {
                startDate = new java.sql.Date(((java.util.Date) setAllMap.get(Constants.START_DATE)).getTime());
            }
            if (setAllMap.get(Constants.END_DATE) != null && setAllMap.get(Constants.SET_ALL_FLAG) == 1) {
                endDate = new java.sql.Date(((java.util.Date) setAllMap.get(Constants.END_DATE)).getTime());
            }

            DeploymentTypeResultVOImpl resultVO = getDeploymentTypeResultVO();
            RowSetIterator resultsRowset = resultVO.createRowSetIterator(null);
            DeploymentTypeResultVORowImpl resultsRow;
            Row[] rows = resultsRowset.getFilteredRows("UpdateInd", "1");
            //resultsRowset.reset();
            for (int index = 0; index < rows.length; index++) {
                if (setAllMap.get(Constants.SET_ALL_FLAG) == 0) {
                    resultsRow = (DeploymentTypeResultVORowImpl) rows[index];
                    resultsRow.setStartDate(startDate);
                }
                if (setAllMap.get(Constants.SET_ALL_FLAG) == 1) {
                    resultsRow = (DeploymentTypeResultVORowImpl) rows[index];
                    resultsRow.setEndDate(endDate);
                }
            }
            resultsRowset.closeRowSetIterator();
            logger.info("SetAllRules function executed successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(e.getMessage());
        }
        return plSqlCallStatus.intValue();
    }


    /**
     * Container's getter for DeploymentTypeStorePopupVO1.
     * @return DeploymentTypeStorePopupVO1
     */
    public AipdtViewObjectImpl getDeploymentTypeStorePopupVO() {
        return (AipdtViewObjectImpl) findViewObject("DeploymentTypeStorePopupVO");
    }

    /**
     * Container's getter for DeploymentTypeItemHierPopupVO1.
     * @return DeploymentTypeItemHierPopupVO1
     */
    public AipdtViewObjectImpl getDeploymentTypeItemHierPopupVO() {
        return (AipdtViewObjectImpl) findViewObject("DeploymentTypeItemHierPopupVO");
    }

    /**
     * Container's getter for DeptOrdFromSuppVO1.
     * @return DeptOrdFromSuppVO1
     */
    public AipdtViewObjectImpl getDeploymentTypeSupplierpopupVO() {
        return (AipdtViewObjectImpl) findViewObject("DeploymentTypeSupplierpopupVO");
    }
}
